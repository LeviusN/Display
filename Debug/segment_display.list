
segment_display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002404  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800258c  0800258c  0001258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025a4  080025a4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  080025a4  080025a4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080025a4  080025a4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025a4  080025a4  000125a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080025a8  080025a8  000125a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080025ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  20000020  080025c8  00020020  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000058  080025c8  00020058  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005a2e  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000117b  00000000  00000000  00025a7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000658  00000000  00000000  00026bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005c0  00000000  00000000  00027250  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035f1  00000000  00000000  00027810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004dca  00000000  00000000  0002ae01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075c80  00000000  00000000  0002fbcb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a584b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000182c  00000000  00000000  000a58a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002574 	.word	0x08002574

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08002574 	.word	0x08002574

080001c8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b089      	sub	sp, #36	; 0x24
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	60f8      	str	r0, [r7, #12]
 80001d0:	60b9      	str	r1, [r7, #8]
 80001d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80001d4:	68fb      	ldr	r3, [r7, #12]
 80001d6:	681a      	ldr	r2, [r3, #0]
 80001d8:	68bb      	ldr	r3, [r7, #8]
 80001da:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001dc:	697b      	ldr	r3, [r7, #20]
 80001de:	fa93 f3a3 	rbit	r3, r3
 80001e2:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80001e4:	693b      	ldr	r3, [r7, #16]
 80001e6:	fab3 f383 	clz	r3, r3
 80001ea:	005b      	lsls	r3, r3, #1
 80001ec:	2103      	movs	r1, #3
 80001ee:	fa01 f303 	lsl.w	r3, r1, r3
 80001f2:	43db      	mvns	r3, r3
 80001f4:	401a      	ands	r2, r3
 80001f6:	68bb      	ldr	r3, [r7, #8]
 80001f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80001fa:	69fb      	ldr	r3, [r7, #28]
 80001fc:	fa93 f3a3 	rbit	r3, r3
 8000200:	61bb      	str	r3, [r7, #24]
  return(result);
 8000202:	69bb      	ldr	r3, [r7, #24]
 8000204:	fab3 f383 	clz	r3, r3
 8000208:	005b      	lsls	r3, r3, #1
 800020a:	6879      	ldr	r1, [r7, #4]
 800020c:	fa01 f303 	lsl.w	r3, r1, r3
 8000210:	431a      	orrs	r2, r3
 8000212:	68fb      	ldr	r3, [r7, #12]
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	3724      	adds	r7, #36	; 0x24
 800021a:	46bd      	mov	sp, r7
 800021c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000220:	4770      	bx	lr

08000222 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8000222:	b480      	push	{r7}
 8000224:	b085      	sub	sp, #20
 8000226:	af00      	add	r7, sp, #0
 8000228:	60f8      	str	r0, [r7, #12]
 800022a:	60b9      	str	r1, [r7, #8]
 800022c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	685a      	ldr	r2, [r3, #4]
 8000232:	68bb      	ldr	r3, [r7, #8]
 8000234:	43db      	mvns	r3, r3
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	6879      	ldr	r1, [r7, #4]
 800023c:	fb01 f303 	mul.w	r3, r1, r3
 8000240:	431a      	orrs	r2, r3
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	605a      	str	r2, [r3, #4]
}
 8000246:	bf00      	nop
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr

08000252 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8000252:	b480      	push	{r7}
 8000254:	b089      	sub	sp, #36	; 0x24
 8000256:	af00      	add	r7, sp, #0
 8000258:	60f8      	str	r0, [r7, #12]
 800025a:	60b9      	str	r1, [r7, #8]
 800025c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800025e:	68fb      	ldr	r3, [r7, #12]
 8000260:	689a      	ldr	r2, [r3, #8]
 8000262:	68bb      	ldr	r3, [r7, #8]
 8000264:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	fa93 f3a3 	rbit	r3, r3
 800026c:	613b      	str	r3, [r7, #16]
  return(result);
 800026e:	693b      	ldr	r3, [r7, #16]
 8000270:	fab3 f383 	clz	r3, r3
 8000274:	005b      	lsls	r3, r3, #1
 8000276:	2103      	movs	r1, #3
 8000278:	fa01 f303 	lsl.w	r3, r1, r3
 800027c:	43db      	mvns	r3, r3
 800027e:	401a      	ands	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000284:	69fb      	ldr	r3, [r7, #28]
 8000286:	fa93 f3a3 	rbit	r3, r3
 800028a:	61bb      	str	r3, [r7, #24]
  return(result);
 800028c:	69bb      	ldr	r3, [r7, #24]
 800028e:	fab3 f383 	clz	r3, r3
 8000292:	005b      	lsls	r3, r3, #1
 8000294:	6879      	ldr	r1, [r7, #4]
 8000296:	fa01 f303 	lsl.w	r3, r1, r3
 800029a:	431a      	orrs	r2, r3
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80002a0:	bf00      	nop
 80002a2:	3724      	adds	r7, #36	; 0x24
 80002a4:	46bd      	mov	sp, r7
 80002a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002aa:	4770      	bx	lr

080002ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	68da      	ldr	r2, [r3, #12]
 80002bc:	68bb      	ldr	r3, [r7, #8]
 80002be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c0:	697b      	ldr	r3, [r7, #20]
 80002c2:	fa93 f3a3 	rbit	r3, r3
 80002c6:	613b      	str	r3, [r7, #16]
  return(result);
 80002c8:	693b      	ldr	r3, [r7, #16]
 80002ca:	fab3 f383 	clz	r3, r3
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	401a      	ands	r2, r3
 80002da:	68bb      	ldr	r3, [r7, #8]
 80002dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002de:	69fb      	ldr	r3, [r7, #28]
 80002e0:	fa93 f3a3 	rbit	r3, r3
 80002e4:	61bb      	str	r3, [r7, #24]
  return(result);
 80002e6:	69bb      	ldr	r3, [r7, #24]
 80002e8:	fab3 f383 	clz	r3, r3
 80002ec:	005b      	lsls	r3, r3, #1
 80002ee:	6879      	ldr	r1, [r7, #4]
 80002f0:	fa01 f303 	lsl.w	r3, r1, r3
 80002f4:	431a      	orrs	r2, r3
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	60da      	str	r2, [r3, #12]
}
 80002fa:	bf00      	nop
 80002fc:	3724      	adds	r7, #36	; 0x24
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000306:	b480      	push	{r7}
 8000308:	b089      	sub	sp, #36	; 0x24
 800030a:	af00      	add	r7, sp, #0
 800030c:	60f8      	str	r0, [r7, #12]
 800030e:	60b9      	str	r1, [r7, #8]
 8000310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	6a1a      	ldr	r2, [r3, #32]
 8000316:	68bb      	ldr	r3, [r7, #8]
 8000318:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800031a:	697b      	ldr	r3, [r7, #20]
 800031c:	fa93 f3a3 	rbit	r3, r3
 8000320:	613b      	str	r3, [r7, #16]
  return(result);
 8000322:	693b      	ldr	r3, [r7, #16]
 8000324:	fab3 f383 	clz	r3, r3
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	210f      	movs	r1, #15
 800032c:	fa01 f303 	lsl.w	r3, r1, r3
 8000330:	43db      	mvns	r3, r3
 8000332:	401a      	ands	r2, r3
 8000334:	68bb      	ldr	r3, [r7, #8]
 8000336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000338:	69fb      	ldr	r3, [r7, #28]
 800033a:	fa93 f3a3 	rbit	r3, r3
 800033e:	61bb      	str	r3, [r7, #24]
  return(result);
 8000340:	69bb      	ldr	r3, [r7, #24]
 8000342:	fab3 f383 	clz	r3, r3
 8000346:	009b      	lsls	r3, r3, #2
 8000348:	6879      	ldr	r1, [r7, #4]
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	431a      	orrs	r2, r3
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8000354:	bf00      	nop
 8000356:	3724      	adds	r7, #36	; 0x24
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr

08000360 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8000360:	b480      	push	{r7}
 8000362:	b089      	sub	sp, #36	; 0x24
 8000364:	af00      	add	r7, sp, #0
 8000366:	60f8      	str	r0, [r7, #12]
 8000368:	60b9      	str	r1, [r7, #8]
 800036a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000370:	68bb      	ldr	r3, [r7, #8]
 8000372:	0a1b      	lsrs	r3, r3, #8
 8000374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000376:	697b      	ldr	r3, [r7, #20]
 8000378:	fa93 f3a3 	rbit	r3, r3
 800037c:	613b      	str	r3, [r7, #16]
  return(result);
 800037e:	693b      	ldr	r3, [r7, #16]
 8000380:	fab3 f383 	clz	r3, r3
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	210f      	movs	r1, #15
 8000388:	fa01 f303 	lsl.w	r3, r1, r3
 800038c:	43db      	mvns	r3, r3
 800038e:	401a      	ands	r2, r3
 8000390:	68bb      	ldr	r3, [r7, #8]
 8000392:	0a1b      	lsrs	r3, r3, #8
 8000394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000396:	69fb      	ldr	r3, [r7, #28]
 8000398:	fa93 f3a3 	rbit	r3, r3
 800039c:	61bb      	str	r3, [r7, #24]
  return(result);
 800039e:	69bb      	ldr	r3, [r7, #24]
 80003a0:	fab3 f383 	clz	r3, r3
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	6879      	ldr	r1, [r7, #4]
 80003a8:	fa01 f303 	lsl.w	r3, r1, r3
 80003ac:	431a      	orrs	r2, r3
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80003b2:	bf00      	nop
 80003b4:	3724      	adds	r7, #36	; 0x24
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr

080003be <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b088      	sub	sp, #32
 80003c2:	af00      	add	r7, sp, #0
 80003c4:	6078      	str	r0, [r7, #4]
 80003c6:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80003c8:	2300      	movs	r3, #0
 80003ca:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80003cc:	2300      	movs	r3, #0
 80003ce:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80003d0:	683b      	ldr	r3, [r7, #0]
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80003d6:	697b      	ldr	r3, [r7, #20]
 80003d8:	fa93 f3a3 	rbit	r3, r3
 80003dc:	613b      	str	r3, [r7, #16]
  return(result);
 80003de:	693b      	ldr	r3, [r7, #16]
 80003e0:	fab3 f383 	clz	r3, r3
 80003e4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80003e6:	e048      	b.n	800047a <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80003e8:	683b      	ldr	r3, [r7, #0]
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	2101      	movs	r1, #1
 80003ee:	69fb      	ldr	r3, [r7, #28]
 80003f0:	fa01 f303 	lsl.w	r3, r1, r3
 80003f4:	4013      	ands	r3, r2
 80003f6:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80003f8:	69bb      	ldr	r3, [r7, #24]
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d03a      	beq.n	8000474 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80003fe:	683b      	ldr	r3, [r7, #0]
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	461a      	mov	r2, r3
 8000404:	69b9      	ldr	r1, [r7, #24]
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f7ff fede 	bl	80001c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	685b      	ldr	r3, [r3, #4]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d003      	beq.n	800041c <LL_GPIO_Init+0x5e>
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	2b02      	cmp	r3, #2
 800041a:	d106      	bne.n	800042a <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800041c:	683b      	ldr	r3, [r7, #0]
 800041e:	689b      	ldr	r3, [r3, #8]
 8000420:	461a      	mov	r2, r3
 8000422:	69b9      	ldr	r1, [r7, #24]
 8000424:	6878      	ldr	r0, [r7, #4]
 8000426:	f7ff ff14 	bl	8000252 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	691b      	ldr	r3, [r3, #16]
 800042e:	461a      	mov	r2, r3
 8000430:	69b9      	ldr	r1, [r7, #24]
 8000432:	6878      	ldr	r0, [r7, #4]
 8000434:	f7ff ff3a 	bl	80002ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	685b      	ldr	r3, [r3, #4]
 800043c:	2b02      	cmp	r3, #2
 800043e:	d119      	bne.n	8000474 <LL_GPIO_Init+0xb6>
 8000440:	69bb      	ldr	r3, [r7, #24]
 8000442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	fa93 f3a3 	rbit	r3, r3
 800044a:	60bb      	str	r3, [r7, #8]
  return(result);
 800044c:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800044e:	fab3 f383 	clz	r3, r3
 8000452:	2b07      	cmp	r3, #7
 8000454:	d807      	bhi.n	8000466 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000456:	683b      	ldr	r3, [r7, #0]
 8000458:	695b      	ldr	r3, [r3, #20]
 800045a:	461a      	mov	r2, r3
 800045c:	69b9      	ldr	r1, [r7, #24]
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ff51 	bl	8000306 <LL_GPIO_SetAFPin_0_7>
 8000464:	e006      	b.n	8000474 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	695b      	ldr	r3, [r3, #20]
 800046a:	461a      	mov	r2, r3
 800046c:	69b9      	ldr	r1, [r7, #24]
 800046e:	6878      	ldr	r0, [r7, #4]
 8000470:	f7ff ff76 	bl	8000360 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8000474:	69fb      	ldr	r3, [r7, #28]
 8000476:	3301      	adds	r3, #1
 8000478:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800047a:	683b      	ldr	r3, [r7, #0]
 800047c:	681a      	ldr	r2, [r3, #0]
 800047e:	69fb      	ldr	r3, [r7, #28]
 8000480:	fa22 f303 	lsr.w	r3, r2, r3
 8000484:	2b00      	cmp	r3, #0
 8000486:	d1af      	bne.n	80003e8 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8000488:	683b      	ldr	r3, [r7, #0]
 800048a:	685b      	ldr	r3, [r3, #4]
 800048c:	2b01      	cmp	r3, #1
 800048e:	d003      	beq.n	8000498 <LL_GPIO_Init+0xda>
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d107      	bne.n	80004a8 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	6819      	ldr	r1, [r3, #0]
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68db      	ldr	r3, [r3, #12]
 80004a0:	461a      	mov	r2, r3
 80004a2:	6878      	ldr	r0, [r7, #4]
 80004a4:	f7ff febd 	bl	8000222 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3720      	adds	r7, #32
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
 80004ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	683a      	ldr	r2, [r7, #0]
 80004c0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	683a      	ldr	r2, [r7, #0]
 80004dc:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr

080004ea <LL_TIM_SetRepetitionCounter>:
  * @param  TIMx Timer instance
  * @param  RepetitionCounter between Min_Data=0 and Max_Data=255
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetRepetitionCounter(TIM_TypeDef *TIMx, uint32_t RepetitionCounter)
{
 80004ea:	b480      	push	{r7}
 80004ec:	b083      	sub	sp, #12
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	6078      	str	r0, [r7, #4]
 80004f2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	683a      	ldr	r2, [r7, #0]
 80004f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr

08000506 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000506:	b480      	push	{r7}
 8000508:	b083      	sub	sp, #12
 800050a:	af00      	add	r7, sp, #0
 800050c:	6078      	str	r0, [r7, #4]
 800050e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	683a      	ldr	r2, [r7, #0]
 8000514:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr

08000522 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
 800052a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	683a      	ldr	r2, [r7, #0]
 8000530:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr

0800053e <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800053e:	b480      	push	{r7}
 8000540:	b083      	sub	sp, #12
 8000542:	af00      	add	r7, sp, #0
 8000544:	6078      	str	r0, [r7, #4]
 8000546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	683a      	ldr	r2, [r7, #0]
 800054c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800054e:	bf00      	nop
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
 8000562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	641a      	str	r2, [r3, #64]	; 0x40
}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000574:	4770      	bx	lr

08000576 <LL_TIM_OC_SetCompareCH5>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH5 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH5(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000576:	b480      	push	{r7}
 8000578:	b083      	sub	sp, #12
 800057a:	af00      	add	r7, sp, #0
 800057c:	6078      	str	r0, [r7, #4]
 800057e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR5, CompareValue);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	683a      	ldr	r2, [r7, #0]
 8000584:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000586:	bf00      	nop
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000590:	4770      	bx	lr

08000592 <LL_TIM_OC_SetCompareCH6>:
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @note   CH6 channel is not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH6(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
 800059a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	683a      	ldr	r2, [r7, #0]
 80005a0:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80005a2:	bf00      	nop
 80005a4:	370c      	adds	r7, #12
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr

080005ae <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	695b      	ldr	r3, [r3, #20]
 80005ba:	f043 0201 	orr.w	r2, r3, #1
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	615a      	str	r2, [r3, #20]
}
 80005c2:	bf00      	nop
 80005c4:	370c      	adds	r7, #12
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
	...

080005d0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	4a2f      	ldr	r2, [pc, #188]	; (80006a4 <LL_TIM_Init+0xd4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d007      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005f2:	d003      	beq.n	80005fc <LL_TIM_Init+0x2c>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4a2c      	ldr	r2, [pc, #176]	; (80006a8 <LL_TIM_Init+0xd8>)
 80005f8:	4293      	cmp	r3, r2
 80005fa:	d106      	bne.n	800060a <LL_TIM_Init+0x3a>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	685b      	ldr	r3, [r3, #4]
 8000606:	4313      	orrs	r3, r2
 8000608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <LL_TIM_Init+0xd4>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d013      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000618:	d00f      	beq.n	800063a <LL_TIM_Init+0x6a>
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	4a22      	ldr	r2, [pc, #136]	; (80006a8 <LL_TIM_Init+0xd8>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d00b      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <LL_TIM_Init+0xdc>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d007      	beq.n	800063a <LL_TIM_Init+0x6a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	4a20      	ldr	r2, [pc, #128]	; (80006b0 <LL_TIM_Init+0xe0>)
 800062e:	4293      	cmp	r3, r2
 8000630:	d003      	beq.n	800063a <LL_TIM_Init+0x6a>
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	4a1f      	ldr	r2, [pc, #124]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d106      	bne.n	8000648 <LL_TIM_Init+0x78>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000640:	683b      	ldr	r3, [r7, #0]
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	4313      	orrs	r3, r2
 8000646:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	68fa      	ldr	r2, [r7, #12]
 800064c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	4619      	mov	r1, r3
 8000654:	6878      	ldr	r0, [r7, #4]
 8000656:	f7ff ff3a 	bl	80004ce <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	881b      	ldrh	r3, [r3, #0]
 800065e:	4619      	mov	r1, r3
 8000660:	6878      	ldr	r0, [r7, #4]
 8000662:	f7ff ff26 	bl	80004b2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	4a0e      	ldr	r2, [pc, #56]	; (80006a4 <LL_TIM_Init+0xd4>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d00b      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	4a0e      	ldr	r2, [pc, #56]	; (80006ac <LL_TIM_Init+0xdc>)
 8000672:	4293      	cmp	r3, r2
 8000674:	d007      	beq.n	8000686 <LL_TIM_Init+0xb6>
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <LL_TIM_Init+0xe0>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d003      	beq.n	8000686 <LL_TIM_Init+0xb6>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LL_TIM_Init+0xe4>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d105      	bne.n	8000692 <LL_TIM_Init+0xc2>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	7c1b      	ldrb	r3, [r3, #16]
 800068a:	4619      	mov	r1, r3
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff2c 	bl	80004ea <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f7ff ff8b 	bl	80005ae <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8000698:	2300      	movs	r3, #0
}
 800069a:	4618      	mov	r0, r3
 800069c:	3710      	adds	r7, #16
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40012c00 	.word	0x40012c00
 80006a8:	40000400 	.word	0x40000400
 80006ac:	40014000 	.word	0x40014000
 80006b0:	40014400 	.word	0x40014400
 80006b4:	40014800 	.word	0x40014800

080006b8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b086      	sub	sp, #24
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80006c4:	2301      	movs	r3, #1
 80006c6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006ce:	d045      	beq.n	800075c <LL_TIM_OC_Init+0xa4>
 80006d0:	68bb      	ldr	r3, [r7, #8]
 80006d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80006d6:	d848      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006de:	d036      	beq.n	800074e <LL_TIM_OC_Init+0x96>
 80006e0:	68bb      	ldr	r3, [r7, #8]
 80006e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80006e6:	d840      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006ee:	d027      	beq.n	8000740 <LL_TIM_OC_Init+0x88>
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80006f6:	d838      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 80006f8:	68bb      	ldr	r3, [r7, #8]
 80006fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80006fe:	d018      	beq.n	8000732 <LL_TIM_OC_Init+0x7a>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000706:	d830      	bhi.n	800076a <LL_TIM_OC_Init+0xb2>
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d003      	beq.n	8000716 <LL_TIM_OC_Init+0x5e>
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	2b10      	cmp	r3, #16
 8000712:	d007      	beq.n	8000724 <LL_TIM_OC_Init+0x6c>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8000714:	e029      	b.n	800076a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8000716:	6879      	ldr	r1, [r7, #4]
 8000718:	68f8      	ldr	r0, [r7, #12]
 800071a:	f000 f82d 	bl	8000778 <OC1Config>
 800071e:	4603      	mov	r3, r0
 8000720:	75fb      	strb	r3, [r7, #23]
      break;
 8000722:	e023      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8000724:	6879      	ldr	r1, [r7, #4]
 8000726:	68f8      	ldr	r0, [r7, #12]
 8000728:	f000 f8a6 	bl	8000878 <OC2Config>
 800072c:	4603      	mov	r3, r0
 800072e:	75fb      	strb	r3, [r7, #23]
      break;
 8000730:	e01c      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8000732:	6879      	ldr	r1, [r7, #4]
 8000734:	68f8      	ldr	r0, [r7, #12]
 8000736:	f000 f923 	bl	8000980 <OC3Config>
 800073a:	4603      	mov	r3, r0
 800073c:	75fb      	strb	r3, [r7, #23]
      break;
 800073e:	e015      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8000740:	6879      	ldr	r1, [r7, #4]
 8000742:	68f8      	ldr	r0, [r7, #12]
 8000744:	f000 f9a0 	bl	8000a88 <OC4Config>
 8000748:	4603      	mov	r3, r0
 800074a:	75fb      	strb	r3, [r7, #23]
      break;
 800074c:	e00e      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800074e:	6879      	ldr	r1, [r7, #4]
 8000750:	68f8      	ldr	r0, [r7, #12]
 8000752:	f000 fa05 	bl	8000b60 <OC5Config>
 8000756:	4603      	mov	r3, r0
 8000758:	75fb      	strb	r3, [r7, #23]
      break;
 800075a:	e007      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 fa60 	bl	8000c24 <OC6Config>
 8000764:	4603      	mov	r3, r0
 8000766:	75fb      	strb	r3, [r7, #23]
      break;
 8000768:	e000      	b.n	800076c <LL_TIM_OC_Init+0xb4>
      break;
 800076a:	bf00      	nop
  }

  return result;
 800076c:	7dfb      	ldrb	r3, [r7, #23]
}
 800076e:	4618      	mov	r0, r3
 8000770:	3718      	adds	r7, #24
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
	...

08000778 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b086      	sub	sp, #24
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
 8000780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000782:	2300      	movs	r3, #0
 8000784:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000786:	2300      	movs	r3, #0
 8000788:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6a1b      	ldr	r3, [r3, #32]
 8000792:	f023 0201 	bic.w	r2, r3, #1
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	6a1b      	ldr	r3, [r3, #32]
 800079e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	699b      	ldr	r3, [r3, #24]
 80007aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	f023 0303 	bic.w	r3, r3, #3
 80007b2:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80007ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80007be:	683a      	ldr	r2, [r7, #0]
 80007c0:	6812      	ldr	r2, [r2, #0]
 80007c2:	4313      	orrs	r3, r2
 80007c4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	f023 0202 	bic.w	r2, r3, #2
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	691b      	ldr	r3, [r3, #16]
 80007d0:	4313      	orrs	r3, r2
 80007d2:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	f023 0201 	bic.w	r2, r3, #1
 80007da:	683b      	ldr	r3, [r7, #0]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	4313      	orrs	r3, r2
 80007e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4a20      	ldr	r2, [pc, #128]	; (8000868 <OC1Config+0xf0>)
 80007e6:	4293      	cmp	r3, r2
 80007e8:	d00b      	beq.n	8000802 <OC1Config+0x8a>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4a1f      	ldr	r2, [pc, #124]	; (800086c <OC1Config+0xf4>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d007      	beq.n	8000802 <OC1Config+0x8a>
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a1e      	ldr	r2, [pc, #120]	; (8000870 <OC1Config+0xf8>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d003      	beq.n	8000802 <OC1Config+0x8a>
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a1d      	ldr	r2, [pc, #116]	; (8000874 <OC1Config+0xfc>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d11e      	bne.n	8000840 <OC1Config+0xc8>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	f023 0208 	bic.w	r2, r3, #8
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	695b      	ldr	r3, [r3, #20]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4313      	orrs	r3, r2
 8000810:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	f023 0204 	bic.w	r2, r3, #4
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	4313      	orrs	r3, r2
 8000820:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	4313      	orrs	r3, r2
 800082e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8000830:	693b      	ldr	r3, [r7, #16]
 8000832:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	4313      	orrs	r3, r2
 800083e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	693a      	ldr	r2, [r7, #16]
 8000844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	68db      	ldr	r3, [r3, #12]
 8000850:	4619      	mov	r1, r3
 8000852:	6878      	ldr	r0, [r7, #4]
 8000854:	f7ff fe57 	bl	8000506 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	40012c00 	.word	0x40012c00
 800086c:	40014000 	.word	0x40014000
 8000870:	40014400 	.word	0x40014400
 8000874:	40014800 	.word	0x40014800

08000878 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b086      	sub	sp, #24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
 8000880:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr1 = 0U;
 8000882:	2300      	movs	r3, #0
 8000884:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000886:	2300      	movs	r3, #0
 8000888:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	6a1b      	ldr	r3, [r3, #32]
 8000892:	f023 0210 	bic.w	r2, r3, #16
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	6a1b      	ldr	r3, [r3, #32]
 800089e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	685b      	ldr	r3, [r3, #4]
 80008a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80008b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80008b4:	68fb      	ldr	r3, [r7, #12]
 80008b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80008ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80008be:	683a      	ldr	r2, [r7, #0]
 80008c0:	6812      	ldr	r2, [r2, #0]
 80008c2:	0212      	lsls	r2, r2, #8
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	f023 0220 	bic.w	r2, r3, #32
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	691b      	ldr	r3, [r3, #16]
 80008d2:	011b      	lsls	r3, r3, #4
 80008d4:	4313      	orrs	r3, r2
 80008d6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	f023 0210 	bic.w	r2, r3, #16
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	011b      	lsls	r3, r3, #4
 80008e4:	4313      	orrs	r3, r2
 80008e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	4a21      	ldr	r2, [pc, #132]	; (8000970 <OC2Config+0xf8>)
 80008ec:	4293      	cmp	r3, r2
 80008ee:	d00b      	beq.n	8000908 <OC2Config+0x90>
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <OC2Config+0xfc>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d007      	beq.n	8000908 <OC2Config+0x90>
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a1f      	ldr	r2, [pc, #124]	; (8000978 <OC2Config+0x100>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d003      	beq.n	8000908 <OC2Config+0x90>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	4a1e      	ldr	r2, [pc, #120]	; (800097c <OC2Config+0x104>)
 8000904:	4293      	cmp	r3, r2
 8000906:	d11f      	bne.n	8000948 <OC2Config+0xd0>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8000908:	697b      	ldr	r3, [r7, #20]
 800090a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800090e:	683b      	ldr	r3, [r7, #0]
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	019b      	lsls	r3, r3, #6
 8000914:	4313      	orrs	r3, r2
 8000916:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8000918:	697b      	ldr	r3, [r7, #20]
 800091a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800091e:	683b      	ldr	r3, [r7, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	019b      	lsls	r3, r3, #6
 8000924:	4313      	orrs	r3, r2
 8000926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	699b      	ldr	r3, [r3, #24]
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	4313      	orrs	r3, r2
 8000936:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8000938:	693b      	ldr	r3, [r7, #16]
 800093a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	69db      	ldr	r3, [r3, #28]
 8000942:	00db      	lsls	r3, r3, #3
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	68fa      	ldr	r2, [r7, #12]
 8000952:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	68db      	ldr	r3, [r3, #12]
 8000958:	4619      	mov	r1, r3
 800095a:	6878      	ldr	r0, [r7, #4]
 800095c:	f7ff fde1 	bl	8000522 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	697a      	ldr	r2, [r7, #20]
 8000964:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000966:	2300      	movs	r3, #0
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40012c00 	.word	0x40012c00
 8000974:	40014000 	.word	0x40014000
 8000978:	40014400 	.word	0x40014400
 800097c:	40014800 	.word	0x40014800

08000980 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b086      	sub	sp, #24
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
 8000988:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 800098a:	2300      	movs	r3, #0
 800098c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 800098e:	2300      	movs	r3, #0
 8000990:	617b      	str	r3, [r7, #20]
  uint32_t tmpcr2 = 0U;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6a1b      	ldr	r3, [r3, #32]
 800099a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6a1b      	ldr	r3, [r3, #32]
 80009a6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	685b      	ldr	r3, [r3, #4]
 80009ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	69db      	ldr	r3, [r3, #28]
 80009b2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f023 0303 	bic.w	r3, r3, #3
 80009ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80009c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80009c6:	683a      	ldr	r2, [r7, #0]
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	691b      	ldr	r3, [r3, #16]
 80009d8:	021b      	lsls	r3, r3, #8
 80009da:	4313      	orrs	r3, r2
 80009dc:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009e4:	683b      	ldr	r3, [r7, #0]
 80009e6:	685b      	ldr	r3, [r3, #4]
 80009e8:	021b      	lsls	r3, r3, #8
 80009ea:	4313      	orrs	r3, r2
 80009ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a21      	ldr	r2, [pc, #132]	; (8000a78 <OC3Config+0xf8>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d00b      	beq.n	8000a0e <OC3Config+0x8e>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4a20      	ldr	r2, [pc, #128]	; (8000a7c <OC3Config+0xfc>)
 80009fa:	4293      	cmp	r3, r2
 80009fc:	d007      	beq.n	8000a0e <OC3Config+0x8e>
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	4a1f      	ldr	r2, [pc, #124]	; (8000a80 <OC3Config+0x100>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d003      	beq.n	8000a0e <OC3Config+0x8e>
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4a1e      	ldr	r2, [pc, #120]	; (8000a84 <OC3Config+0x104>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d11f      	bne.n	8000a4e <OC3Config+0xce>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	695b      	ldr	r3, [r3, #20]
 8000a18:	029b      	lsls	r3, r3, #10
 8000a1a:	4313      	orrs	r3, r2
 8000a1c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	689b      	ldr	r3, [r3, #8]
 8000a28:	029b      	lsls	r3, r3, #10
 8000a2a:	4313      	orrs	r3, r2
 8000a2c:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	011b      	lsls	r3, r3, #4
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	69db      	ldr	r3, [r3, #28]
 8000a48:	015b      	lsls	r3, r3, #5
 8000a4a:	4313      	orrs	r3, r2
 8000a4c:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8000a5a:	683b      	ldr	r3, [r7, #0]
 8000a5c:	68db      	ldr	r3, [r3, #12]
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6878      	ldr	r0, [r7, #4]
 8000a62:	f7ff fd6c 	bl	800053e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000a6c:	2300      	movs	r3, #0
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	3718      	adds	r7, #24
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40012c00 	.word	0x40012c00
 8000a7c:	40014000 	.word	0x40014000
 8000a80:	40014400 	.word	0x40014400
 8000a84:	40014800 	.word	0x40014800

08000a88 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
 8000a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr2 = 0U;
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
  uint32_t tmpccer = 0U;
 8000a96:	2300      	movs	r3, #0
 8000a98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpcr2 = 0U;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a1b      	ldr	r3, [r3, #32]
 8000aa2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6a1b      	ldr	r3, [r3, #32]
 8000aae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	69db      	ldr	r3, [r3, #28]
 8000aba:	613b      	str	r3, [r7, #16]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ac2:	613b      	str	r3, [r7, #16]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8000ac4:	693b      	ldr	r3, [r7, #16]
 8000ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000aca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000ace:	683a      	ldr	r2, [r7, #0]
 8000ad0:	6812      	ldr	r2, [r2, #0]
 8000ad2:	0212      	lsls	r2, r2, #8
 8000ad4:	4313      	orrs	r3, r2
 8000ad6:	613b      	str	r3, [r7, #16]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	031b      	lsls	r3, r3, #12
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	031b      	lsls	r3, r3, #12
 8000af4:	4313      	orrs	r3, r2
 8000af6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <OC4Config+0xc8>)
 8000afc:	4293      	cmp	r3, r2
 8000afe:	d00b      	beq.n	8000b18 <OC4Config+0x90>
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <OC4Config+0xcc>)
 8000b04:	4293      	cmp	r3, r2
 8000b06:	d007      	beq.n	8000b18 <OC4Config+0x90>
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	4a13      	ldr	r2, [pc, #76]	; (8000b58 <OC4Config+0xd0>)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d003      	beq.n	8000b18 <OC4Config+0x90>
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4a12      	ldr	r2, [pc, #72]	; (8000b5c <OC4Config+0xd4>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d107      	bne.n	8000b28 <OC4Config+0xa0>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	699b      	ldr	r3, [r3, #24]
 8000b22:	019b      	lsls	r3, r3, #6
 8000b24:	4313      	orrs	r3, r2
 8000b26:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	697a      	ldr	r2, [r7, #20]
 8000b2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	4619      	mov	r1, r3
 8000b3a:	6878      	ldr	r0, [r7, #4]
 8000b3c:	f7ff fd0d 	bl	800055a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	68fa      	ldr	r2, [r7, #12]
 8000b44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000b46:	2300      	movs	r3, #0
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40012c00 	.word	0x40012c00
 8000b54:	40014000 	.word	0x40014000
 8000b58:	40014400 	.word	0x40014400
 8000b5c:	40014800 	.word	0x40014800

08000b60 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6a1b      	ldr	r3, [r3, #32]
 8000b76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a1b      	ldr	r3, [r3, #32]
 8000b82:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b94:	683a      	ldr	r2, [r7, #0]
 8000b96:	6812      	ldr	r2, [r2, #0]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8000b9c:	68bb      	ldr	r3, [r7, #8]
 8000b9e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	691b      	ldr	r3, [r3, #16]
 8000ba6:	041b      	lsls	r3, r3, #16
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	685b      	ldr	r3, [r3, #4]
 8000bb6:	041b      	lsls	r3, r3, #16
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	4a15      	ldr	r2, [pc, #84]	; (8000c14 <OC5Config+0xb4>)
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00b      	beq.n	8000bdc <OC5Config+0x7c>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a14      	ldr	r2, [pc, #80]	; (8000c18 <OC5Config+0xb8>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d007      	beq.n	8000bdc <OC5Config+0x7c>
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	4a13      	ldr	r2, [pc, #76]	; (8000c1c <OC5Config+0xbc>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d003      	beq.n	8000bdc <OC5Config+0x7c>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	4a12      	ldr	r2, [pc, #72]	; (8000c20 <OC5Config+0xc0>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d109      	bne.n	8000bf0 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	021b      	lsls	r3, r3, #8
 8000bea:	431a      	orrs	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	68fa      	ldr	r2, [r7, #12]
 8000bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	4619      	mov	r1, r3
 8000bfc:	6878      	ldr	r0, [r7, #4]
 8000bfe:	f7ff fcba 	bl	8000576 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	68ba      	ldr	r2, [r7, #8]
 8000c06:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000c08:	2300      	movs	r3, #0
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40012c00 	.word	0x40012c00
 8000c18:	40014000 	.word	0x40014000
 8000c1c:	40014400 	.word	0x40014400
 8000c20:	40014800 	.word	0x40014800

08000c24 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmr3 = 0U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
  uint32_t tmpccer = 0U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6a1b      	ldr	r3, [r3, #32]
 8000c3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6a1b      	ldr	r3, [r3, #32]
 8000c46:	60bb      	str	r3, [r7, #8]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000c54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000c58:	683a      	ldr	r2, [r7, #0]
 8000c5a:	6812      	ldr	r2, [r2, #0]
 8000c5c:	0212      	lsls	r2, r2, #8
 8000c5e:	4313      	orrs	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	051b      	lsls	r3, r3, #20
 8000c6e:	4313      	orrs	r3, r2
 8000c70:	60bb      	str	r3, [r7, #8]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	051b      	lsls	r3, r3, #20
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	60bb      	str	r3, [r7, #8]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4a14      	ldr	r2, [pc, #80]	; (8000cd8 <OC6Config+0xb4>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00b      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4a13      	ldr	r2, [pc, #76]	; (8000cdc <OC6Config+0xb8>)
 8000c8e:	4293      	cmp	r3, r2
 8000c90:	d007      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <OC6Config+0xbc>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d003      	beq.n	8000ca2 <OC6Config+0x7e>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <OC6Config+0xc0>)
 8000c9e:	4293      	cmp	r3, r2
 8000ca0:	d109      	bne.n	8000cb6 <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	029b      	lsls	r3, r3, #10
 8000cb0:	431a      	orrs	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	68fa      	ldr	r2, [r7, #12]
 8000cba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	6878      	ldr	r0, [r7, #4]
 8000cc4:	f7ff fc65 	bl	8000592 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8000cce:	2300      	movs	r3, #0
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	40012c00 	.word	0x40012c00
 8000cdc:	40014000 	.word	0x40014000
 8000ce0:	40014400 	.word	0x40014400
 8000ce4:	40014800 	.word	0x40014800

08000ce8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cfa:	4a07      	ldr	r2, [pc, #28]	; (8000d18 <LL_InitTick+0x30>)
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	; (8000d18 <LL_InitTick+0x30>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <LL_InitTick+0x30>)
 8000d08:	2205      	movs	r2, #5
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000d24:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ffdd 	bl	8000ce8 <LL_InitTick>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8000d40:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <LL_mDelay+0x48>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000d46:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d4e:	d00c      	beq.n	8000d6a <LL_mDelay+0x32>
  {
    Delay++;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	3301      	adds	r3, #1
 8000d54:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000d56:	e008      	b.n	8000d6a <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000d58:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <LL_mDelay+0x48>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d002      	beq.n	8000d6a <LL_mDelay+0x32>
    {
      Delay--;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	607b      	str	r3, [r7, #4]
  while (Delay)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d1f3      	bne.n	8000d58 <LL_mDelay+0x20>
    }
  }
}
 8000d70:	bf00      	nop
 8000d72:	bf00      	nop
 8000d74:	3714      	adds	r7, #20
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e010 	.word	0xe000e010

08000d84 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8000d8c:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <LL_SetSystemCoreClock+0x1c>)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6013      	str	r3, [r2, #0]
}
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000018 	.word	0x20000018

08000da4 <LL_TIM_ClearFlag_UPDATE>:
{
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f06f 0201 	mvn.w	r2, #1
 8000db2:	611a      	str	r2, [r3, #16]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF));
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	bf0c      	ite	eq
 8000dd4:	2301      	moveq	r3, #1
 8000dd6:	2300      	movne	r3, #0
 8000dd8:	b2db      	uxtb	r3, r3
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
 8000dee:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	683a      	ldr	r2, [r7, #0]
 8000df4:	619a      	str	r2, [r3, #24]
}
 8000df6:	bf00      	nop
 8000df8:	370c      	adds	r7, #12
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e00:	4770      	bx	lr

08000e02 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b083      	sub	sp, #12
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
 8000e0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
	...

08000e20 <resetSegments>:
void updateDisplay(void);
void setDigit(uint8_t pos);

/*Reset (turn-off) all the segments of display*/
void resetSegments(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2c:	f7ff ffdb 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e38:	f7ff ffd5 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e3c:	2102      	movs	r1, #2
 8000e3e:	480e      	ldr	r0, [pc, #56]	; (8000e78 <resetSegments+0x58>)
 8000e40:	f7ff ffd1 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000e44:	2120      	movs	r1, #32
 8000e46:	480c      	ldr	r0, [pc, #48]	; (8000e78 <resetSegments+0x58>)
 8000e48:	f7ff ffcd 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000e4c:	2110      	movs	r1, #16
 8000e4e:	480a      	ldr	r0, [pc, #40]	; (8000e78 <resetSegments+0x58>)
 8000e50:	f7ff ffc9 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000e54:	2101      	movs	r1, #1
 8000e56:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e5a:	f7ff ffc4 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000e5e:	2102      	movs	r1, #2
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f7ff ffbf 	bl	8000de6 <LL_GPIO_SetOutputPin>
	LL_GPIO_SetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000e68:	2108      	movs	r1, #8
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f7ff ffba 	bl	8000de6 <LL_GPIO_SetOutputPin>
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	48000400 	.word	0x48000400

08000e7c <setSegments>:

/*Set (turn-on) all the segments of display*/
void setSegments(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_11);
 8000e80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e88:	f7ff ffbb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_8);
 8000e8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e94:	f7ff ffb5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1);
 8000e98:	2102      	movs	r1, #2
 8000e9a:	480e      	ldr	r0, [pc, #56]	; (8000ed4 <setSegments+0x58>)
 8000e9c:	f7ff ffb1 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_5);
 8000ea0:	2120      	movs	r1, #32
 8000ea2:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <setSegments+0x58>)
 8000ea4:	f7ff ffad 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_4);
 8000ea8:	2110      	movs	r1, #16
 8000eaa:	480a      	ldr	r0, [pc, #40]	; (8000ed4 <setSegments+0x58>)
 8000eac:	f7ff ffa9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0);
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f7ff ffa4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_1);
 8000eba:	2102      	movs	r1, #2
 8000ebc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ec0:	f7ff ff9f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_3);
 8000ec4:	2108      	movs	r1, #8
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f7ff ff9a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000ece:	bf00      	nop
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	48000400 	.word	0x48000400

08000ed8 <resetDigits>:

/* Reset (turn-off) all digits*/
void resetDigits(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_2);
 8000edc:	2104      	movs	r1, #4
 8000ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee2:	f7ff ff8e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_5);
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eec:	f7ff ff89 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_4);
 8000ef0:	2110      	movs	r1, #16
 8000ef2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ef6:	f7ff ff84 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_6);
 8000efa:	2140      	movs	r1, #64	; 0x40
 8000efc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f00:	f7ff ff7f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_7);
 8000f04:	2180      	movs	r1, #128	; 0x80
 8000f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0a:	f7ff ff7a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <setDigits>:

/* Reset (turn-on) all digits*/
void setDigits(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
	DIGIT_1_ON;
 8000f16:	2120      	movs	r1, #32
 8000f18:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f1c:	f7ff ff63 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_2_ON;
 8000f20:	2110      	movs	r1, #16
 8000f22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f26:	f7ff ff5e 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_3_ON;
 8000f2a:	2140      	movs	r1, #64	; 0x40
 8000f2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f30:	f7ff ff59 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_4_ON;
 8000f34:	2104      	movs	r1, #4
 8000f36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f3a:	f7ff ff54 	bl	8000de6 <LL_GPIO_SetOutputPin>
	DIGIT_TIME_ON;
 8000f3e:	2180      	movs	r1, #128	; 0x80
 8000f40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f44:	f7ff ff4f 	bl	8000de6 <LL_GPIO_SetOutputPin>
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <setOne>:
	LL_GPIO_ResetOutputPin(SEGMENTDP_PORT, SEGMENTDP_PIN);
}

/* Functions to display numbers 0 - 9 */
void setOne(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
	// B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f50:	2101      	movs	r1, #1
 8000f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f56:	f7ff ff54 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000f5a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f62:	f7ff ff4e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <setTwo>:

void setTwo(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	// A,B,G,E,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000f70:	2101      	movs	r1, #1
 8000f72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f76:	f7ff ff44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000f7a:	2102      	movs	r1, #2
 8000f7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f80:	f7ff ff3f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000f84:	2110      	movs	r1, #16
 8000f86:	4807      	ldr	r0, [pc, #28]	; (8000fa4 <setTwo+0x38>)
 8000f88:	f7ff ff3b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8000f8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f94:	f7ff ff35 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000f98:	2120      	movs	r1, #32
 8000f9a:	4802      	ldr	r0, [pc, #8]	; (8000fa4 <setTwo+0x38>)
 8000f9c:	f7ff ff31 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	48000400 	.word	0x48000400

08000fa8 <setThree>:

void setThree(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	// A,B,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000fac:	2101      	movs	r1, #1
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f7ff ff26 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8000fb6:	2102      	movs	r1, #2
 8000fb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbc:	f7ff ff21 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000fc0:	2110      	movs	r1, #16
 8000fc2:	4807      	ldr	r0, [pc, #28]	; (8000fe0 <setThree+0x38>)
 8000fc4:	f7ff ff1d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8000fc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd0:	f7ff ff17 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8000fd4:	2120      	movs	r1, #32
 8000fd6:	4802      	ldr	r0, [pc, #8]	; (8000fe0 <setThree+0x38>)
 8000fd8:	f7ff ff13 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8000fdc:	bf00      	nop
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <setFour>:

void setFour(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
	// F,B,G,C
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8000fe8:	2108      	movs	r1, #8
 8000fea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fee:	f7ff ff08 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ff8:	f7ff ff03 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8000ffc:	2110      	movs	r1, #16
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <setFour+0x30>)
 8001000:	f7ff feff 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001004:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800100c:	f7ff fef9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	48000400 	.word	0x48000400

08001018 <setFive>:

void setFive(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
	// A,F,G,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800101c:	2108      	movs	r1, #8
 800101e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001022:	f7ff feee 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001026:	2120      	movs	r1, #32
 8001028:	4809      	ldr	r0, [pc, #36]	; (8001050 <setFive+0x38>)
 800102a:	f7ff feea 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800102e:	2110      	movs	r1, #16
 8001030:	4807      	ldr	r0, [pc, #28]	; (8001050 <setFive+0x38>)
 8001032:	f7ff fee6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f7ff fee0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001042:	2102      	movs	r1, #2
 8001044:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001048:	f7ff fedb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	48000400 	.word	0x48000400

08001054 <setSix>:

void setSix(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
	// A,F,G,E,C,D
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001058:	2108      	movs	r1, #8
 800105a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105e:	f7ff fed0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001062:	2120      	movs	r1, #32
 8001064:	480c      	ldr	r0, [pc, #48]	; (8001098 <setSix+0x44>)
 8001066:	f7ff fecc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800106a:	2110      	movs	r1, #16
 800106c:	480a      	ldr	r0, [pc, #40]	; (8001098 <setSix+0x44>)
 800106e:	f7ff fec8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001072:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f7ff fec2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800107e:	2102      	movs	r1, #2
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f7ff febd 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001088:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800108c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001090:	f7ff feb7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001094:	bf00      	nop
 8001096:	bd80      	pop	{r7, pc}
 8001098:	48000400 	.word	0x48000400

0800109c <setSeven>:

void setSeven(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80010a0:	2101      	movs	r1, #1
 80010a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a6:	f7ff feac 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010b2:	f7ff fea6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80010b6:	2102      	movs	r1, #2
 80010b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010bc:	f7ff fea1 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80010c0:	bf00      	nop
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <setEight>:

void setEight(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F,G
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80010c8:	2108      	movs	r1, #8
 80010ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ce:	f7ff fe98 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80010d2:	2120      	movs	r1, #32
 80010d4:	480f      	ldr	r0, [pc, #60]	; (8001114 <setEight+0x50>)
 80010d6:	f7ff fe94 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80010da:	2110      	movs	r1, #16
 80010dc:	480d      	ldr	r0, [pc, #52]	; (8001114 <setEight+0x50>)
 80010de:	f7ff fe90 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80010e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010ea:	f7ff fe8a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80010ee:	2102      	movs	r1, #2
 80010f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f4:	f7ff fe85 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80010f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f7ff fe7f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001104:	2101      	movs	r1, #1
 8001106:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800110a:	f7ff fe7a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	48000400 	.word	0x48000400

08001118 <setNine>:

void setNine(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	// A,B,C
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 800111c:	2101      	movs	r1, #1
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f7ff fe6e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001126:	f44f 7180 	mov.w	r1, #256	; 0x100
 800112a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112e:	f7ff fe68 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001132:	2102      	movs	r1, #2
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f7ff fe63 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800113c:	2110      	movs	r1, #16
 800113e:	4805      	ldr	r0, [pc, #20]	; (8001154 <setNine+0x3c>)
 8001140:	f7ff fe5f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001144:	2108      	movs	r1, #8
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114a:	f7ff fe5a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800114e:	bf00      	nop
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	48000400 	.word	0x48000400

08001158 <setZero>:

void setZero(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	// A,B,C,D,E,F
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800115c:	2108      	movs	r1, #8
 800115e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001162:	f7ff fe4e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001166:	2120      	movs	r1, #32
 8001168:	480d      	ldr	r0, [pc, #52]	; (80011a0 <setZero+0x48>)
 800116a:	f7ff fe4a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800116e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001172:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001176:	f7ff fe44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800117a:	2102      	movs	r1, #2
 800117c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001180:	f7ff fe3f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001184:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001188:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800118c:	f7ff fe39 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001190:	2101      	movs	r1, #1
 8001192:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001196:	f7ff fe34 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	48000400 	.word	0x48000400

080011a4 <setA>:

void setA (void){
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80011a8:	2102      	movs	r1, #2
 80011aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011ae:	f7ff fe28 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80011b2:	2101      	movs	r1, #1
 80011b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b8:	f7ff fe23 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c4:	f7ff fe1d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80011c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011d0:	f7ff fe17 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80011d4:	2108      	movs	r1, #8
 80011d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011da:	f7ff fe12 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80011de:	2110      	movs	r1, #16
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <setA+0x48>)
 80011e2:	f7ff fe0e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	48000400 	.word	0x48000400

080011f0 <setB>:

void setB (void){
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80011f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80011f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fc:	f7ff fe01 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001200:	2120      	movs	r1, #32
 8001202:	480a      	ldr	r0, [pc, #40]	; (800122c <setB+0x3c>)
 8001204:	f7ff fdfd 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001208:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f7ff fdf7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001214:	2108      	movs	r1, #8
 8001216:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800121a:	f7ff fdf2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800121e:	2110      	movs	r1, #16
 8001220:	4802      	ldr	r0, [pc, #8]	; (800122c <setB+0x3c>)
 8001222:	f7ff fdee 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	48000400 	.word	0x48000400

08001230 <setC>:

void setC (void){
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001234:	2102      	movs	r1, #2
 8001236:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800123a:	f7ff fde2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800123e:	2120      	movs	r1, #32
 8001240:	4807      	ldr	r0, [pc, #28]	; (8001260 <setC+0x30>)
 8001242:	f7ff fdde 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001246:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800124a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800124e:	f7ff fdd8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001252:	2108      	movs	r1, #8
 8001254:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001258:	f7ff fdd3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	48000400 	.word	0x48000400

08001264 <setD>:

void setD (void){
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001268:	2101      	movs	r1, #1
 800126a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800126e:	f7ff fdc8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f7ff fdc2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800127e:	2120      	movs	r1, #32
 8001280:	4807      	ldr	r0, [pc, #28]	; (80012a0 <setD+0x3c>)
 8001282:	f7ff fdbe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800128a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800128e:	f7ff fdb8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001292:	2110      	movs	r1, #16
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <setD+0x3c>)
 8001296:	f7ff fdb4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	48000400 	.word	0x48000400

080012a4 <setE>:

void setE (void){
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012a8:	2102      	movs	r1, #2
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f7ff fda8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80012b2:	2120      	movs	r1, #32
 80012b4:	4809      	ldr	r0, [pc, #36]	; (80012dc <setE+0x38>)
 80012b6:	f7ff fda4 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80012ba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f7ff fd9e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80012c6:	2108      	movs	r1, #8
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f7ff fd99 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80012d0:	2110      	movs	r1, #16
 80012d2:	4802      	ldr	r0, [pc, #8]	; (80012dc <setE+0x38>)
 80012d4:	f7ff fd95 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80012d8:	bf00      	nop
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	48000400 	.word	0x48000400

080012e0 <setF>:

void setF (void){
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80012e4:	2102      	movs	r1, #2
 80012e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ea:	f7ff fd8a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80012ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f7ff fd84 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80012fa:	2108      	movs	r1, #8
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001300:	f7ff fd7f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001304:	2110      	movs	r1, #16
 8001306:	4802      	ldr	r0, [pc, #8]	; (8001310 <setF+0x30>)
 8001308:	f7ff fd7b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}
 8001310:	48000400 	.word	0x48000400

08001314 <setG>:

void setG (void){
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001318:	2102      	movs	r1, #2
 800131a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131e:	f7ff fd70 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001326:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800132a:	f7ff fd6a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800132e:	2120      	movs	r1, #32
 8001330:	4807      	ldr	r0, [pc, #28]	; (8001350 <setG+0x3c>)
 8001332:	f7ff fd66 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001336:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f7ff fd60 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001342:	2108      	movs	r1, #8
 8001344:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001348:	f7ff fd5b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800134c:	bf00      	nop
 800134e:	bd80      	pop	{r7, pc}
 8001350:	48000400 	.word	0x48000400

08001354 <setH>:

void setH (void){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001358:	2101      	movs	r1, #1
 800135a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800135e:	f7ff fd50 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001362:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f7ff fd4a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800136e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001372:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001376:	f7ff fd44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800137a:	2108      	movs	r1, #8
 800137c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001380:	f7ff fd3f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001384:	2110      	movs	r1, #16
 8001386:	4802      	ldr	r0, [pc, #8]	; (8001390 <setH+0x3c>)
 8001388:	f7ff fd3b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	48000400 	.word	0x48000400

08001394 <setI>:

void setI (void){
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001398:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800139c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a0:	f7ff fd2f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80013a4:	2108      	movs	r1, #8
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f7ff fd2a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80013ae:	bf00      	nop
 80013b0:	bd80      	pop	{r7, pc}
	...

080013b4 <setJ>:

void setJ (void){
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80013b8:	2101      	movs	r1, #1
 80013ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013be:	f7ff fd20 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013ca:	f7ff fd1a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80013ce:	2120      	movs	r1, #32
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <setJ+0x34>)
 80013d2:	f7ff fd16 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80013d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f7ff fd10 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80013e2:	bf00      	nop
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	48000400 	.word	0x48000400

080013ec <setK>:

void setK (void){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80013f0:	2102      	movs	r1, #2
 80013f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f6:	f7ff fd04 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80013fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001402:	f7ff fcfe 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001406:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f7ff fcf8 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001412:	2108      	movs	r1, #8
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f7ff fcf3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 800141c:	2110      	movs	r1, #16
 800141e:	4802      	ldr	r0, [pc, #8]	; (8001428 <setK+0x3c>)
 8001420:	f7ff fcef 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001424:	bf00      	nop
 8001426:	bd80      	pop	{r7, pc}
 8001428:	48000400 	.word	0x48000400

0800142c <setL>:

void setL (void){
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001430:	2120      	movs	r1, #32
 8001432:	4808      	ldr	r0, [pc, #32]	; (8001454 <setL+0x28>)
 8001434:	f7ff fce5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001438:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800143c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001440:	f7ff fcdf 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001444:	2108      	movs	r1, #8
 8001446:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800144a:	f7ff fcda 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	48000400 	.word	0x48000400

08001458 <setM>:

void setM (void){
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800145c:	2102      	movs	r1, #2
 800145e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001462:	f7ff fcce 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001466:	2101      	movs	r1, #1
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f7ff fcc9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001470:	2120      	movs	r1, #32
 8001472:	4805      	ldr	r0, [pc, #20]	; (8001488 <setM+0x30>)
 8001474:	f7ff fcc5 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001478:	2108      	movs	r1, #8
 800147a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800147e:	f7ff fcc0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	48000400 	.word	0x48000400

0800148c <setN>:

void setN (void){
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001490:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001494:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001498:	f7ff fcb3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800149c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a4:	f7ff fcad 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80014a8:	2110      	movs	r1, #16
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <setN+0x28>)
 80014ac:	f7ff fca9 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	48000400 	.word	0x48000400

080014b8 <setO>:

void setO (void){
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80014bc:	2102      	movs	r1, #2
 80014be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c2:	f7ff fc9e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80014c6:	2101      	movs	r1, #1
 80014c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014cc:	f7ff fc99 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80014d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014d8:	f7ff fc93 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80014dc:	2120      	movs	r1, #32
 80014de:	4808      	ldr	r0, [pc, #32]	; (8001500 <setO+0x48>)
 80014e0:	f7ff fc8f 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80014e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ec:	f7ff fc89 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80014f0:	2108      	movs	r1, #8
 80014f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014f6:	f7ff fc84 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	48000400 	.word	0x48000400

08001504 <setP>:

void setP (void){
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001508:	2102      	movs	r1, #2
 800150a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150e:	f7ff fc78 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001512:	2101      	movs	r1, #1
 8001514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001518:	f7ff fc73 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800151c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001520:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001524:	f7ff fc6d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001528:	2108      	movs	r1, #8
 800152a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800152e:	f7ff fc68 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001532:	2110      	movs	r1, #16
 8001534:	4802      	ldr	r0, [pc, #8]	; (8001540 <setP+0x3c>)
 8001536:	f7ff fc64 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	48000400 	.word	0x48000400

08001544 <setQ>:

void setQ (void){
 8001544:	b580      	push	{r7, lr}
 8001546:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 8001548:	2102      	movs	r1, #2
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f7ff fc58 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001552:	2101      	movs	r1, #1
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f7ff fc53 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800155c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001560:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001564:	f7ff fc4d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001568:	2108      	movs	r1, #8
 800156a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800156e:	f7ff fc48 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001572:	2110      	movs	r1, #16
 8001574:	4802      	ldr	r0, [pc, #8]	; (8001580 <setQ+0x3c>)
 8001576:	f7ff fc44 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48000400 	.word	0x48000400

08001584 <setR>:

void setR (void){
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001588:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800158c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001590:	f7ff fc37 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001594:	2110      	movs	r1, #16
 8001596:	4802      	ldr	r0, [pc, #8]	; (80015a0 <setR+0x1c>)
 8001598:	f7ff fc33 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800159c:	bf00      	nop
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	48000400 	.word	0x48000400

080015a4 <setS>:

void setS (void){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80015a8:	2102      	movs	r1, #2
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f7ff fc28 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80015b2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80015b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ba:	f7ff fc22 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015be:	2120      	movs	r1, #32
 80015c0:	4806      	ldr	r0, [pc, #24]	; (80015dc <setS+0x38>)
 80015c2:	f7ff fc1e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015c6:	2108      	movs	r1, #8
 80015c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015cc:	f7ff fc19 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80015d0:	2110      	movs	r1, #16
 80015d2:	4802      	ldr	r0, [pc, #8]	; (80015dc <setS+0x38>)
 80015d4:	f7ff fc15 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80015d8:	bf00      	nop
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	48000400 	.word	0x48000400

080015e0 <setT>:

void setT (void){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80015e4:	2120      	movs	r1, #32
 80015e6:	480a      	ldr	r0, [pc, #40]	; (8001610 <setT+0x30>)
 80015e8:	f7ff fc0b 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 80015ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f7ff fc05 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80015f8:	2108      	movs	r1, #8
 80015fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015fe:	f7ff fc00 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001602:	2110      	movs	r1, #16
 8001604:	4802      	ldr	r0, [pc, #8]	; (8001610 <setT+0x30>)
 8001606:	f7ff fbfc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800160a:	bf00      	nop
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	48000400 	.word	0x48000400

08001614 <setU>:

void setU (void){
 8001614:	b580      	push	{r7, lr}
 8001616:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001618:	2101      	movs	r1, #1
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f7ff fbf0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 8001622:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001626:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800162a:	f7ff fbea 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 800162e:	2120      	movs	r1, #32
 8001630:	4807      	ldr	r0, [pc, #28]	; (8001650 <setU+0x3c>)
 8001632:	f7ff fbe6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001636:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800163e:	f7ff fbe0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 8001642:	2108      	movs	r1, #8
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f7ff fbdb 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	48000400 	.word	0x48000400

08001654 <setV>:

void setV (void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001658:	2101      	movs	r1, #1
 800165a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800165e:	f7ff fbd0 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001662:	2120      	movs	r1, #32
 8001664:	4804      	ldr	r0, [pc, #16]	; (8001678 <setV+0x24>)
 8001666:	f7ff fbcc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800166a:	2108      	movs	r1, #8
 800166c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001670:	f7ff fbc7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001674:	bf00      	nop
 8001676:	bd80      	pop	{r7, pc}
 8001678:	48000400 	.word	0x48000400

0800167c <setW>:

void setW (void){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001680:	2101      	movs	r1, #1
 8001682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001686:	f7ff fbbc 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 800168a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800168e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001692:	f7ff fbb6 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001696:	2120      	movs	r1, #32
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <setW+0x44>)
 800169a:	f7ff fbb2 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016a6:	f7ff fbac 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 80016aa:	2108      	movs	r1, #8
 80016ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b0:	f7ff fba7 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016b4:	2110      	movs	r1, #16
 80016b6:	4802      	ldr	r0, [pc, #8]	; (80016c0 <setW+0x44>)
 80016b8:	f7ff fba3 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80016bc:	bf00      	nop
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	48000400 	.word	0x48000400

080016c4 <setX>:

void setX (void){
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 80016c8:	2102      	movs	r1, #2
 80016ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ce:	f7ff fb98 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 80016d2:	2120      	movs	r1, #32
 80016d4:	4804      	ldr	r0, [pc, #16]	; (80016e8 <setX+0x24>)
 80016d6:	f7ff fb94 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 80016da:	2110      	movs	r1, #16
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <setX+0x24>)
 80016de:	f7ff fb90 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	48000400 	.word	0x48000400

080016ec <setY>:

void setY (void){
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 80016f0:	2101      	movs	r1, #1
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016f6:	f7ff fb84 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTC_PORT, SEGMENTC_PIN);
 80016fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80016fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001702:	f7ff fb7e 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001706:	2120      	movs	r1, #32
 8001708:	4806      	ldr	r0, [pc, #24]	; (8001724 <setY+0x38>)
 800170a:	f7ff fb7a 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTF_PORT, SEGMENTF_PIN);
 800170e:	2108      	movs	r1, #8
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f7ff fb75 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001718:	2110      	movs	r1, #16
 800171a:	4802      	ldr	r0, [pc, #8]	; (8001724 <setY+0x38>)
 800171c:	f7ff fb71 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001720:	bf00      	nop
 8001722:	bd80      	pop	{r7, pc}
 8001724:	48000400 	.word	0x48000400

08001728 <setZ>:

void setZ (void){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTA_PORT, SEGMENTA_PIN);
 800172c:	2102      	movs	r1, #2
 800172e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001732:	f7ff fb66 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTB_PORT, SEGMENTB_PIN);
 8001736:	2101      	movs	r1, #1
 8001738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800173c:	f7ff fb61 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001740:	2120      	movs	r1, #32
 8001742:	4807      	ldr	r0, [pc, #28]	; (8001760 <setZ+0x38>)
 8001744:	f7ff fb5d 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTE_PORT, SEGMENTE_PIN);
 8001748:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800174c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001750:	f7ff fb57 	bl	8000e02 <LL_GPIO_ResetOutputPin>
	LL_GPIO_ResetOutputPin(SEGMENTG_PORT, SEGMENTG_PIN);
 8001754:	2110      	movs	r1, #16
 8001756:	4802      	ldr	r0, [pc, #8]	; (8001760 <setZ+0x38>)
 8001758:	f7ff fb53 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 800175c:	bf00      	nop
 800175e:	bd80      	pop	{r7, pc}
 8001760:	48000400 	.word	0x48000400

08001764 <setUnderscore>:


void setUnderscore (void){
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
	LL_GPIO_ResetOutputPin(SEGMENTD_PORT, SEGMENTD_PIN);
 8001768:	2120      	movs	r1, #32
 800176a:	4802      	ldr	r0, [pc, #8]	; (8001774 <setUnderscore+0x10>)
 800176c:	f7ff fb49 	bl	8000e02 <LL_GPIO_ResetOutputPin>
}
 8001770:	bf00      	nop
 8001772:	bd80      	pop	{r7, pc}
 8001774:	48000400 	.word	0x48000400

08001778 <dispelements>:
/**
 * Displaying elements
 */
void dispelements(uint8_t num)
{
 8001778:	b480      	push	{r7}
 800177a:	b085      	sub	sp, #20
 800177c:	af00      	add	r7, sp, #0
 800177e:	4603      	mov	r3, r0
 8001780:	71fb      	strb	r3, [r7, #7]

	for(uint8_t i = 0; i < 4; i++){
 8001782:	2300      	movs	r3, #0
 8001784:	73fb      	strb	r3, [r7, #15]
 8001786:	e00c      	b.n	80017a2 <dispelements+0x2a>
		dDisplayData.digit[3-i]=name_ID[num+i];
 8001788:	79fa      	ldrb	r2, [r7, #7]
 800178a:	7bfb      	ldrb	r3, [r7, #15]
 800178c:	441a      	add	r2, r3
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	f1c3 0303 	rsb	r3, r3, #3
 8001794:	4908      	ldr	r1, [pc, #32]	; (80017b8 <dispelements+0x40>)
 8001796:	5c89      	ldrb	r1, [r1, r2]
 8001798:	4a08      	ldr	r2, [pc, #32]	; (80017bc <dispelements+0x44>)
 800179a:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < 4; i++){
 800179c:	7bfb      	ldrb	r3, [r7, #15]
 800179e:	3301      	adds	r3, #1
 80017a0:	73fb      	strb	r3, [r7, #15]
 80017a2:	7bfb      	ldrb	r3, [r7, #15]
 80017a4:	2b03      	cmp	r3, #3
 80017a6:	d9ef      	bls.n	8001788 <dispelements+0x10>
	}
}
 80017a8:	bf00      	nop
 80017aa:	bf00      	nop
 80017ac:	3714      	adds	r7, #20
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	20000000 	.word	0x20000000
 80017bc:	2000003c 	.word	0x2000003c

080017c0 <setDigit>:

/*
 * Turns required digit ON
 */
void setDigit(uint8_t pos)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
	switch(pos)
 80017ca:	79fb      	ldrb	r3, [r7, #7]
 80017cc:	2b03      	cmp	r3, #3
 80017ce:	d823      	bhi.n	8001818 <setDigit+0x58>
 80017d0:	a201      	add	r2, pc, #4	; (adr r2, 80017d8 <setDigit+0x18>)
 80017d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d6:	bf00      	nop
 80017d8:	080017e9 	.word	0x080017e9
 80017dc:	080017f5 	.word	0x080017f5
 80017e0:	08001801 	.word	0x08001801
 80017e4:	0800180d 	.word	0x0800180d
	{
		case 0:
			DIGIT_4_ON;
 80017e8:	2104      	movs	r1, #4
 80017ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ee:	f7ff fafa 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 80017f2:	e011      	b.n	8001818 <setDigit+0x58>
		case 1:
			DIGIT_3_ON;
 80017f4:	2140      	movs	r1, #64	; 0x40
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017fa:	f7ff faf4 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 80017fe:	e00b      	b.n	8001818 <setDigit+0x58>
		case 2:
			DIGIT_2_ON;
 8001800:	2110      	movs	r1, #16
 8001802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001806:	f7ff faee 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 800180a:	e005      	b.n	8001818 <setDigit+0x58>
		case 3:
			DIGIT_1_ON;
 800180c:	2120      	movs	r1, #32
 800180e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001812:	f7ff fae8 	bl	8000de6 <LL_GPIO_SetOutputPin>
			break;
 8001816:	bf00      	nop
	}
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <updateDisplay>:
/**
 * Display data in dDisplayData.
 * Sets every digit to display its value and decimal point.
 */
void updateDisplay(void)
{
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	for(uint8_t i = 0; i < 4; i++)
 8001826:	2300      	movs	r3, #0
 8001828:	71fb      	strb	r3, [r7, #7]
 800182a:	e1bf      	b.n	8001bac <updateDisplay+0x38c>
	{
		switch(dDisplayData.digit[i])
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	4acd      	ldr	r2, [pc, #820]	; (8001b64 <updateDisplay+0x344>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	3b30      	subs	r3, #48	; 0x30
 8001834:	2b4a      	cmp	r3, #74	; 0x4a
 8001836:	f200 819e 	bhi.w	8001b76 <updateDisplay+0x356>
 800183a:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <updateDisplay+0x20>)
 800183c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001840:	0800196d 	.word	0x0800196d
 8001844:	0800197b 	.word	0x0800197b
 8001848:	08001989 	.word	0x08001989
 800184c:	08001997 	.word	0x08001997
 8001850:	080019a5 	.word	0x080019a5
 8001854:	080019b3 	.word	0x080019b3
 8001858:	080019c1 	.word	0x080019c1
 800185c:	080019cf 	.word	0x080019cf
 8001860:	080019dd 	.word	0x080019dd
 8001864:	080019eb 	.word	0x080019eb
 8001868:	08001b77 	.word	0x08001b77
 800186c:	08001b77 	.word	0x08001b77
 8001870:	08001b77 	.word	0x08001b77
 8001874:	08001b77 	.word	0x08001b77
 8001878:	08001b77 	.word	0x08001b77
 800187c:	08001b77 	.word	0x08001b77
 8001880:	08001b77 	.word	0x08001b77
 8001884:	08001a07 	.word	0x08001a07
 8001888:	08001a15 	.word	0x08001a15
 800188c:	08001a23 	.word	0x08001a23
 8001890:	08001a31 	.word	0x08001a31
 8001894:	08001a3f 	.word	0x08001a3f
 8001898:	08001a4d 	.word	0x08001a4d
 800189c:	08001a5b 	.word	0x08001a5b
 80018a0:	08001a69 	.word	0x08001a69
 80018a4:	08001a77 	.word	0x08001a77
 80018a8:	08001a85 	.word	0x08001a85
 80018ac:	08001a93 	.word	0x08001a93
 80018b0:	08001aa1 	.word	0x08001aa1
 80018b4:	08001aaf 	.word	0x08001aaf
 80018b8:	08001abd 	.word	0x08001abd
 80018bc:	08001acb 	.word	0x08001acb
 80018c0:	08001ad9 	.word	0x08001ad9
 80018c4:	08001ae7 	.word	0x08001ae7
 80018c8:	08001af5 	.word	0x08001af5
 80018cc:	08001b03 	.word	0x08001b03
 80018d0:	08001b11 	.word	0x08001b11
 80018d4:	08001b1f 	.word	0x08001b1f
 80018d8:	08001b2d 	.word	0x08001b2d
 80018dc:	08001b3b 	.word	0x08001b3b
 80018e0:	08001b49 	.word	0x08001b49
 80018e4:	08001b57 	.word	0x08001b57
 80018e8:	08001b69 	.word	0x08001b69
 80018ec:	08001b77 	.word	0x08001b77
 80018f0:	08001b77 	.word	0x08001b77
 80018f4:	08001b77 	.word	0x08001b77
 80018f8:	08001b77 	.word	0x08001b77
 80018fc:	080019f9 	.word	0x080019f9
 8001900:	08001b77 	.word	0x08001b77
 8001904:	08001a07 	.word	0x08001a07
 8001908:	08001a15 	.word	0x08001a15
 800190c:	08001a23 	.word	0x08001a23
 8001910:	08001a31 	.word	0x08001a31
 8001914:	08001a3f 	.word	0x08001a3f
 8001918:	08001a4d 	.word	0x08001a4d
 800191c:	08001a5b 	.word	0x08001a5b
 8001920:	08001a69 	.word	0x08001a69
 8001924:	08001a77 	.word	0x08001a77
 8001928:	08001a85 	.word	0x08001a85
 800192c:	08001a93 	.word	0x08001a93
 8001930:	08001aa1 	.word	0x08001aa1
 8001934:	08001aaf 	.word	0x08001aaf
 8001938:	08001abd 	.word	0x08001abd
 800193c:	08001acb 	.word	0x08001acb
 8001940:	08001ad9 	.word	0x08001ad9
 8001944:	08001ae7 	.word	0x08001ae7
 8001948:	08001af5 	.word	0x08001af5
 800194c:	08001b03 	.word	0x08001b03
 8001950:	08001b11 	.word	0x08001b11
 8001954:	08001b1f 	.word	0x08001b1f
 8001958:	08001b2d 	.word	0x08001b2d
 800195c:	08001b3b 	.word	0x08001b3b
 8001960:	08001b49 	.word	0x08001b49
 8001964:	08001b57 	.word	0x08001b57
 8001968:	08001b69 	.word	0x08001b69
		{
		//cisla
			case '0':
			  setDigit(i);
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff ff26 	bl	80017c0 <setDigit>
			  setZero();
 8001974:	f7ff fbf0 	bl	8001158 <setZero>
			  break;
 8001978:	e0fd      	b.n	8001b76 <updateDisplay+0x356>
			case '1':
			  setDigit(i);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff1f 	bl	80017c0 <setDigit>
			  setOne();
 8001982:	f7ff fae3 	bl	8000f4c <setOne>
			  break;
 8001986:	e0f6      	b.n	8001b76 <updateDisplay+0x356>
			case '2':
			  setDigit(i);
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	4618      	mov	r0, r3
 800198c:	f7ff ff18 	bl	80017c0 <setDigit>
			  setTwo();
 8001990:	f7ff faec 	bl	8000f6c <setTwo>
			  break;
 8001994:	e0ef      	b.n	8001b76 <updateDisplay+0x356>
			case '3':
			  setDigit(i);
 8001996:	79fb      	ldrb	r3, [r7, #7]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff11 	bl	80017c0 <setDigit>
			  setThree();
 800199e:	f7ff fb03 	bl	8000fa8 <setThree>
			  break;
 80019a2:	e0e8      	b.n	8001b76 <updateDisplay+0x356>
			case '4':
			  setDigit(i);
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff ff0a 	bl	80017c0 <setDigit>
			  setFour();
 80019ac:	f7ff fb1a 	bl	8000fe4 <setFour>
			  break;
 80019b0:	e0e1      	b.n	8001b76 <updateDisplay+0x356>
			case '5':
			  setDigit(i);
 80019b2:	79fb      	ldrb	r3, [r7, #7]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff03 	bl	80017c0 <setDigit>
			  setFive();
 80019ba:	f7ff fb2d 	bl	8001018 <setFive>
			  break;
 80019be:	e0da      	b.n	8001b76 <updateDisplay+0x356>
			case '6':
			  setDigit(i);
 80019c0:	79fb      	ldrb	r3, [r7, #7]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fefc 	bl	80017c0 <setDigit>
			  setSix();
 80019c8:	f7ff fb44 	bl	8001054 <setSix>
			  break;
 80019cc:	e0d3      	b.n	8001b76 <updateDisplay+0x356>
			case '7':
			  setDigit(i);
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7ff fef5 	bl	80017c0 <setDigit>
			  setSeven();
 80019d6:	f7ff fb61 	bl	800109c <setSeven>
			  break;
 80019da:	e0cc      	b.n	8001b76 <updateDisplay+0x356>
			case '8':
			  setDigit(i);
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff feee 	bl	80017c0 <setDigit>
			  setEight();
 80019e4:	f7ff fb6e 	bl	80010c4 <setEight>
			  break;
 80019e8:	e0c5      	b.n	8001b76 <updateDisplay+0x356>
			case '9':
			  setDigit(i);
 80019ea:	79fb      	ldrb	r3, [r7, #7]
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7ff fee7 	bl	80017c0 <setDigit>
			  setNine();
 80019f2:	f7ff fb91 	bl	8001118 <setNine>
			  break;
 80019f6:	e0be      	b.n	8001b76 <updateDisplay+0x356>
			case '_':
				setDigit(i);
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f7ff fee0 	bl	80017c0 <setDigit>
				setUnderscore();
 8001a00:	f7ff feb0 	bl	8001764 <setUnderscore>
				break;
 8001a04:	e0b7      	b.n	8001b76 <updateDisplay+0x356>
			//abeceda
			case 'a':
			case 'A':
				setDigit(i);
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fed9 	bl	80017c0 <setDigit>
				setA();
 8001a0e:	f7ff fbc9 	bl	80011a4 <setA>
				break;
 8001a12:	e0b0      	b.n	8001b76 <updateDisplay+0x356>
			case 'b':
			case 'B':
				setDigit(i);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7ff fed2 	bl	80017c0 <setDigit>
				setB();
 8001a1c:	f7ff fbe8 	bl	80011f0 <setB>
				break;
 8001a20:	e0a9      	b.n	8001b76 <updateDisplay+0x356>
			case 'c':
			case 'C':
				setDigit(i);
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff fecb 	bl	80017c0 <setDigit>
				setC();
 8001a2a:	f7ff fc01 	bl	8001230 <setC>
				break;
 8001a2e:	e0a2      	b.n	8001b76 <updateDisplay+0x356>
			case 'd':
			case 'D':
				setDigit(i);
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fec4 	bl	80017c0 <setDigit>
				setD();
 8001a38:	f7ff fc14 	bl	8001264 <setD>
				break;
 8001a3c:	e09b      	b.n	8001b76 <updateDisplay+0x356>
			case 'e':
			case 'E':
				setDigit(i);
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff febd 	bl	80017c0 <setDigit>
				setE();
 8001a46:	f7ff fc2d 	bl	80012a4 <setE>
				break;
 8001a4a:	e094      	b.n	8001b76 <updateDisplay+0x356>
			case 'f':
			case 'F':
				setDigit(i);
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7ff feb6 	bl	80017c0 <setDigit>
				setF();
 8001a54:	f7ff fc44 	bl	80012e0 <setF>
				break;
 8001a58:	e08d      	b.n	8001b76 <updateDisplay+0x356>
			case 'g':
			case 'G':
				setDigit(i);
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff feaf 	bl	80017c0 <setDigit>
				setG();
 8001a62:	f7ff fc57 	bl	8001314 <setG>
				break;
 8001a66:	e086      	b.n	8001b76 <updateDisplay+0x356>
			case 'h':
			case 'H':
				setDigit(i);
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f7ff fea8 	bl	80017c0 <setDigit>
				setH();
 8001a70:	f7ff fc70 	bl	8001354 <setH>
				break;
 8001a74:	e07f      	b.n	8001b76 <updateDisplay+0x356>
			case 'i':
			case 'I':
				setDigit(i);
 8001a76:	79fb      	ldrb	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fea1 	bl	80017c0 <setDigit>
				setI();
 8001a7e:	f7ff fc89 	bl	8001394 <setI>
				break;
 8001a82:	e078      	b.n	8001b76 <updateDisplay+0x356>
			case 'j':
			case 'J':
				setDigit(i);
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe9a 	bl	80017c0 <setDigit>
				setJ();
 8001a8c:	f7ff fc92 	bl	80013b4 <setJ>
				break;
 8001a90:	e071      	b.n	8001b76 <updateDisplay+0x356>
			case 'k':
			case 'K':
				setDigit(i);
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7ff fe93 	bl	80017c0 <setDigit>
				setK();
 8001a9a:	f7ff fca7 	bl	80013ec <setK>
				break;
 8001a9e:	e06a      	b.n	8001b76 <updateDisplay+0x356>
			case 'l':
			case 'L':
				setDigit(i);
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7ff fe8c 	bl	80017c0 <setDigit>
				setL();
 8001aa8:	f7ff fcc0 	bl	800142c <setL>
				break;
 8001aac:	e063      	b.n	8001b76 <updateDisplay+0x356>
			case 'm':
			case 'M':
				setDigit(i);
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff fe85 	bl	80017c0 <setDigit>
				setM();
 8001ab6:	f7ff fccf 	bl	8001458 <setM>
				break;
 8001aba:	e05c      	b.n	8001b76 <updateDisplay+0x356>
			case 'n':
			case 'N':
				setDigit(i);
 8001abc:	79fb      	ldrb	r3, [r7, #7]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe7e 	bl	80017c0 <setDigit>
				setN();
 8001ac4:	f7ff fce2 	bl	800148c <setN>
				break;
 8001ac8:	e055      	b.n	8001b76 <updateDisplay+0x356>
			case 'o':
			case 'O':
				setDigit(i);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff fe77 	bl	80017c0 <setDigit>
				setO();
 8001ad2:	f7ff fcf1 	bl	80014b8 <setO>
				break;
 8001ad6:	e04e      	b.n	8001b76 <updateDisplay+0x356>
			case 'p':
			case 'P':
				setDigit(i);
 8001ad8:	79fb      	ldrb	r3, [r7, #7]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe70 	bl	80017c0 <setDigit>
				setP();
 8001ae0:	f7ff fd10 	bl	8001504 <setP>
				break;
 8001ae4:	e047      	b.n	8001b76 <updateDisplay+0x356>
			case 'q':
			case 'Q':
				setDigit(i);
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fe69 	bl	80017c0 <setDigit>
				setQ();
 8001aee:	f7ff fd29 	bl	8001544 <setQ>
				break;
 8001af2:	e040      	b.n	8001b76 <updateDisplay+0x356>
			case 'r':
			case 'R':
				setDigit(i);
 8001af4:	79fb      	ldrb	r3, [r7, #7]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fe62 	bl	80017c0 <setDigit>
				setR();
 8001afc:	f7ff fd42 	bl	8001584 <setR>
				break;
 8001b00:	e039      	b.n	8001b76 <updateDisplay+0x356>
			case 's':
			case 'S':
				setDigit(i);
 8001b02:	79fb      	ldrb	r3, [r7, #7]
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff fe5b 	bl	80017c0 <setDigit>
				setS();
 8001b0a:	f7ff fd4b 	bl	80015a4 <setS>
				break;
 8001b0e:	e032      	b.n	8001b76 <updateDisplay+0x356>
			case 't':
			case 'T':
				setDigit(i);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fe54 	bl	80017c0 <setDigit>
				setT();
 8001b18:	f7ff fd62 	bl	80015e0 <setT>
				break;
 8001b1c:	e02b      	b.n	8001b76 <updateDisplay+0x356>
			case 'u':
			case 'U':
				setDigit(i);
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fe4d 	bl	80017c0 <setDigit>
				setU();
 8001b26:	f7ff fd75 	bl	8001614 <setU>
				break;
 8001b2a:	e024      	b.n	8001b76 <updateDisplay+0x356>
			case 'v':
			case 'V':
				setDigit(i);
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fe46 	bl	80017c0 <setDigit>
				setV();
 8001b34:	f7ff fd8e 	bl	8001654 <setV>
				break;
 8001b38:	e01d      	b.n	8001b76 <updateDisplay+0x356>
			case 'w':
			case 'W':
				setDigit(i);
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff fe3f 	bl	80017c0 <setDigit>
				setW();
 8001b42:	f7ff fd9b 	bl	800167c <setW>
				break;
 8001b46:	e016      	b.n	8001b76 <updateDisplay+0x356>
			case 'x':
			case 'X':
				setDigit(i);
 8001b48:	79fb      	ldrb	r3, [r7, #7]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f7ff fe38 	bl	80017c0 <setDigit>
				setX();
 8001b50:	f7ff fdb8 	bl	80016c4 <setX>
				break;
 8001b54:	e00f      	b.n	8001b76 <updateDisplay+0x356>
			case 'y':
			case 'Y':
				setDigit(i);
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe31 	bl	80017c0 <setDigit>
				setY();
 8001b5e:	f7ff fdc5 	bl	80016ec <setY>
				break;
 8001b62:	e008      	b.n	8001b76 <updateDisplay+0x356>
 8001b64:	2000003c 	.word	0x2000003c
			case 'z':
			case 'Z':
				setDigit(i);
 8001b68:	79fb      	ldrb	r3, [r7, #7]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe28 	bl	80017c0 <setDigit>
				setZ();
 8001b70:	f7ff fdda 	bl	8001728 <setZ>
				break;
 8001b74:	bf00      	nop
		}
		disp_time_saved = disp_time;
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <updateDisplay+0x3a0>)
 8001b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b7c:	4911      	ldr	r1, [pc, #68]	; (8001bc4 <updateDisplay+0x3a4>)
 8001b7e:	e9c1 2300 	strd	r2, r3, [r1]
		while((disp_time_saved + 2) > disp_time){};
 8001b82:	bf00      	nop
 8001b84:	4b0f      	ldr	r3, [pc, #60]	; (8001bc4 <updateDisplay+0x3a4>)
 8001b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b8a:	1c94      	adds	r4, r2, #2
 8001b8c:	f143 0500 	adc.w	r5, r3, #0
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <updateDisplay+0x3a0>)
 8001b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b96:	42ab      	cmp	r3, r5
 8001b98:	bf08      	it	eq
 8001b9a:	42a2      	cmpeq	r2, r4
 8001b9c:	d3f2      	bcc.n	8001b84 <updateDisplay+0x364>

		resetDigits();
 8001b9e:	f7ff f99b 	bl	8000ed8 <resetDigits>
		resetSegments();
 8001ba2:	f7ff f93d 	bl	8000e20 <resetSegments>
	for(uint8_t i = 0; i < 4; i++)
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	f67f ae3c 	bls.w	800182c <updateDisplay+0xc>
	}
}
 8001bb4:	bf00      	nop
 8001bb6:	bf00      	nop
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000048 	.word	0x20000048
 8001bc4:	20000050 	.word	0x20000050

08001bc8 <TIM3_IRQHandler>:

//Update displayed data and keep display ON
void TIM3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
	if(LL_TIM_IsActiveFlag_UPDATE(TIM3))
 8001bcc:	4806      	ldr	r0, [pc, #24]	; (8001be8 <TIM3_IRQHandler+0x20>)
 8001bce:	f7ff f8f7 	bl	8000dc0 <LL_TIM_IsActiveFlag_UPDATE>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <TIM3_IRQHandler+0x14>
	{
		updateDisplay();
 8001bd8:	f7ff fe22 	bl	8001820 <updateDisplay>
	}

	LL_TIM_ClearFlag_UPDATE(TIM3);
 8001bdc:	4802      	ldr	r0, [pc, #8]	; (8001be8 <TIM3_IRQHandler+0x20>)
 8001bde:	f7ff f8e1 	bl	8000da4 <LL_TIM_ClearFlag_UPDATE>
}
 8001be2:	bf00      	nop
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400

08001bec <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b085      	sub	sp, #20
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bf6:	695a      	ldr	r2, [r3, #20]
 8001bf8:	4907      	ldr	r1, [pc, #28]	; (8001c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001c02:	695a      	ldr	r2, [r3, #20]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4013      	ands	r3, r2
 8001c08:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_GPIO_ResetOutputPin>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c2c:	bf00      	nop
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b086      	sub	sp, #24
 8001c3c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c3e:	463b      	mov	r3, r7
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
 8001c44:	605a      	str	r2, [r3, #4]
 8001c46:	609a      	str	r2, [r3, #8]
 8001c48:	60da      	str	r2, [r3, #12]
 8001c4a:	611a      	str	r2, [r3, #16]
 8001c4c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8001c4e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001c52:	f7ff ffcb 	bl	8001bec <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001c56:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c5a:	f7ff ffc7 	bl	8001bec <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001c5e:	f640 111b 	movw	r1, #2331	; 0x91b
 8001c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c66:	f7ff ffd9 	bl	8001c1c <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5);
 8001c6a:	2132      	movs	r1, #50	; 0x32
 8001c6c:	4813      	ldr	r0, [pc, #76]	; (8001cbc <MX_GPIO_Init+0x84>)
 8001c6e:	f7ff ffd5 	bl	8001c1c <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_3|LL_GPIO_PIN_4 
 8001c72:	f640 13ff 	movw	r3, #2559	; 0x9ff
 8001c76:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_8|LL_GPIO_PIN_11|LL_GPIO_PIN_2|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6|LL_GPIO_PIN_7;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c80:	2300      	movs	r3, #0
 8001c82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c84:	2300      	movs	r3, #0
 8001c86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c88:	463b      	mov	r3, r7
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c90:	f7fe fb95 	bl	80003be <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001c94:	2332      	movs	r3, #50	; 0x32
 8001c96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca8:	463b      	mov	r3, r7
 8001caa:	4619      	mov	r1, r3
 8001cac:	4803      	ldr	r0, [pc, #12]	; (8001cbc <MX_GPIO_Init+0x84>)
 8001cae:	f7fe fb86 	bl	80003be <LL_GPIO_Init>

}
 8001cb2:	bf00      	nop
 8001cb4:	3718      	adds	r7, #24
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	48000400 	.word	0x48000400

08001cc0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	; (8001d04 <NVIC_SetPriorityGrouping+0x44>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cd6:	68ba      	ldr	r2, [r7, #8]
 8001cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cf2:	4a04      	ldr	r2, [pc, #16]	; (8001d04 <NVIC_SetPriorityGrouping+0x44>)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	60d3      	str	r3, [r2, #12]
}
 8001cf8:	bf00      	nop
 8001cfa:	3714      	adds	r7, #20
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001d0c:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <LL_RCC_HSI_Enable+0x1c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a04      	ldr	r2, [pc, #16]	; (8001d24 <LL_RCC_HSI_Enable+0x1c>)
 8001d12:	f043 0301 	orr.w	r3, r3, #1
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40021000 	.word	0x40021000

08001d28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <LL_RCC_HSI_IsReady+0x20>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0302 	and.w	r3, r3, #2
 8001d34:	2b02      	cmp	r3, #2
 8001d36:	bf0c      	ite	eq
 8001d38:	2301      	moveq	r3, #1
 8001d3a:	2300      	movne	r3, #0
 8001d3c:	b2db      	uxtb	r3, r3
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	40021000 	.word	0x40021000

08001d4c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001d54:	4b07      	ldr	r3, [pc, #28]	; (8001d74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	00db      	lsls	r3, r3, #3
 8001d60:	4904      	ldr	r1, [pc, #16]	; (8001d74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	600b      	str	r3, [r1, #0]
}
 8001d66:	bf00      	nop
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000

08001d78 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <LL_RCC_SetSysClkSource+0x24>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f023 0203 	bic.w	r2, r3, #3
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <LL_RCC_SetSysClkSource+0x24>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40021000 	.word	0x40021000

08001da0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001da4:	4b04      	ldr	r3, [pc, #16]	; (8001db8 <LL_RCC_GetSysClkSource+0x18>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40021000 	.word	0x40021000

08001dbc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dcc:	4904      	ldr	r1, [pc, #16]	; (8001de0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr
 8001de0:	40021000 	.word	0x40021000

08001de4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	604b      	str	r3, [r1, #4]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40021000 	.word	0x40021000

08001e0c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e1c:	4904      	ldr	r1, [pc, #16]	; (8001e30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	604b      	str	r3, [r1, #4]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	40021000 	.word	0x40021000

08001e34 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e3e:	69da      	ldr	r2, [r3, #28]
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001e4a:	69da      	ldr	r2, [r3, #28]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e52:	68fb      	ldr	r3, [r7, #12]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr
 8001e60:	40021000 	.word	0x40021000

08001e64 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e6e:	699a      	ldr	r2, [r3, #24]
 8001e70:	4907      	ldr	r1, [pc, #28]	; (8001e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001e78:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001e7a:	699a      	ldr	r2, [r3, #24]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001e82:	68fb      	ldr	r3, [r7, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	40021000 	.word	0x40021000

08001e94 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001e9c:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <LL_FLASH_SetLatency+0x24>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f023 0207 	bic.w	r2, r3, #7
 8001ea4:	4904      	ldr	r1, [pc, #16]	; (8001eb8 <LL_FLASH_SetLatency+0x24>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	600b      	str	r3, [r1, #0]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40022000 	.word	0x40022000

08001ebc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ec0:	4b04      	ldr	r3, [pc, #16]	; (8001ed4 <LL_FLASH_GetLatency+0x18>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0307 	and.w	r3, r3, #7
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	40022000 	.word	0x40022000

08001ed8 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d106      	bne.n	8001ef4 <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <LL_SYSTICK_SetClkSource+0x34>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <LL_SYSTICK_SetClkSource+0x34>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 8001ef2:	e005      	b.n	8001f00 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <LL_SYSTICK_SetClkSource+0x34>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <LL_SYSTICK_SetClkSource+0x34>)
 8001efa:	f023 0304 	bic.w	r3, r3, #4
 8001efe:	6013      	str	r3, [r2, #0]
}
 8001f00:	bf00      	nop
 8001f02:	370c      	adds	r7, #12
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000e010 	.word	0xe000e010

08001f10 <LL_SYSTICK_EnableIT>:
  * @brief  Enable SysTick exception request
  * @rmtoll STK_CTRL     TICKINT       LL_SYSTICK_EnableIT
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_EnableIT(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8001f14:	4b05      	ldr	r3, [pc, #20]	; (8001f2c <LL_SYSTICK_EnableIT+0x1c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a04      	ldr	r2, [pc, #16]	; (8001f2c <LL_SYSTICK_EnableIT+0x1c>)
 8001f1a:	f043 0302 	orr.w	r3, r3, #2
 8001f1e:	6013      	str	r3, [r2, #0]
}
 8001f20:	bf00      	nop
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	e000e010 	.word	0xe000e010

08001f30 <main>:

extern char name_ID;
extern uint8_t name_IDsize;

int main(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001f36:	2001      	movs	r0, #1
 8001f38:	f7ff ff94 	bl	8001e64 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001f3c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001f40:	f7ff ff78 	bl	8001e34 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f44:	2003      	movs	r0, #3
 8001f46:	f7ff febb 	bl	8001cc0 <NVIC_SetPriorityGrouping>

  SystemClock_Config();
 8001f4a:	f000 f843 	bl	8001fd4 <SystemClock_Config>

  MX_GPIO_Init();
 8001f4e:	f7ff fe73 	bl	8001c38 <MX_GPIO_Init>

  setSegments();
 8001f52:	f7fe ff93 	bl	8000e7c <setSegments>
  setDigits();
 8001f56:	f7fe ffdc 	bl	8000f12 <setDigits>

  LL_mDelay(2000);
 8001f5a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001f5e:	f7fe feeb 	bl	8000d38 <LL_mDelay>

  resetDigits();
 8001f62:	f7fe ffb9 	bl	8000ed8 <resetDigits>
  resetSegments();
 8001f66:	f7fe ff5b 	bl	8000e20 <resetSegments>

  MX_TIM3_Init();
 8001f6a:	f000 fa4b 	bl	8002404 <MX_TIM3_Init>


  uint8_t num = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
  uint8_t direction = 1;
 8001f72:	2301      	movs	r3, #1
 8001f74:	71bb      	strb	r3, [r7, #6]

  while (1)
  {
	  switch(direction){
 8001f76:	79bb      	ldrb	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d015      	beq.n	8001fa8 <main+0x78>
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d124      	bne.n	8001fca <main+0x9a>
	  case 1:
		  	  LL_mDelay(500);
 8001f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f84:	f7fe fed8 	bl	8000d38 <LL_mDelay>
			  dispelements(num);
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7ff fbf4 	bl	8001778 <dispelements>
			  if (num==(name_IDsize-6)){
 8001f90:	79fa      	ldrb	r2, [r7, #7]
 8001f92:	4b0f      	ldr	r3, [pc, #60]	; (8001fd0 <main+0xa0>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	3b06      	subs	r3, #6
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d101      	bne.n	8001fa0 <main+0x70>
				  direction=0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	71bb      	strb	r3, [r7, #6]
			  }
			  num++;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	71fb      	strb	r3, [r7, #7]
			  break;
 8001fa6:	e011      	b.n	8001fcc <main+0x9c>
	  case 0:
		  	  LL_mDelay(500);
 8001fa8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001fac:	f7fe fec4 	bl	8000d38 <LL_mDelay>
			  dispelements(num);
 8001fb0:	79fb      	ldrb	r3, [r7, #7]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fbe0 	bl	8001778 <dispelements>
			  if (num==1){
 8001fb8:	79fb      	ldrb	r3, [r7, #7]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d101      	bne.n	8001fc2 <main+0x92>
				  direction=1;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	71bb      	strb	r3, [r7, #6]
			  }
			  num--;
 8001fc2:	79fb      	ldrb	r3, [r7, #7]
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	71fb      	strb	r3, [r7, #7]
			  break;
 8001fc8:	e000      	b.n	8001fcc <main+0x9c>
	  default:
		  break;
 8001fca:	bf00      	nop
	  switch(direction){
 8001fcc:	e7d3      	b.n	8001f76 <main+0x46>
 8001fce:	bf00      	nop
 8001fd0:	20000014 	.word	0x20000014

08001fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff ff5b 	bl	8001e94 <LL_FLASH_SetLatency>

  if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0)
 8001fde:	f7ff ff6d 	bl	8001ebc <LL_FLASH_GetLatency>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <SystemClock_Config+0x18>
  {
  Error_Handler();
 8001fe8:	f000 f82c 	bl	8002044 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8001fec:	f7ff fe8c 	bl	8001d08 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001ff0:	bf00      	nop
 8001ff2:	f7ff fe99 	bl	8001d28 <LL_RCC_HSI_IsReady>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d1fa      	bne.n	8001ff2 <SystemClock_Config+0x1e>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001ffc:	2010      	movs	r0, #16
 8001ffe:	f7ff fea5 	bl	8001d4c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002002:	2000      	movs	r0, #0
 8002004:	f7ff feda 	bl	8001dbc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff feeb 	bl	8001de4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff fefc 	bl	8001e0c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff feaf 	bl	8001d78 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800201a:	bf00      	nop
 800201c:	f7ff fec0 	bl	8001da0 <LL_RCC_GetSysClkSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1fa      	bne.n	800201c <SystemClock_Config+0x48>
  {

  }
  LL_Init1msTick(8000000);
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <SystemClock_Config+0x6c>)
 8002028:	f7fe fe78 	bl	8000d1c <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800202c:	2004      	movs	r0, #4
 800202e:	f7ff ff53 	bl	8001ed8 <LL_SYSTICK_SetClkSource>
  LL_SYSTICK_EnableIT();
 8002032:	f7ff ff6d 	bl	8001f10 <LL_SYSTICK_EnableIT>
  LL_SetSystemCoreClock(8000000);
 8002036:	4802      	ldr	r0, [pc, #8]	; (8002040 <SystemClock_Config+0x6c>)
 8002038:	f7fe fea4 	bl	8000d84 <LL_SetSystemCoreClock>
}
 800203c:	bf00      	nop
 800203e:	bd80      	pop	{r7, pc}
 8002040:	007a1200 	.word	0x007a1200

08002044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr

08002052 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002052:	b480      	push	{r7}
 8002054:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002056:	bf00      	nop
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002064:	e7fe      	b.n	8002064 <HardFault_Handler+0x4>

08002066 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002066:	b480      	push	{r7}
 8002068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800206a:	e7fe      	b.n	800206a <MemManage_Handler+0x4>

0800206c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002070:	e7fe      	b.n	8002070 <BusFault_Handler+0x4>

08002072 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002076:	e7fe      	b.n	8002076 <UsageFault_Handler+0x4>

08002078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr

08002086 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002086:	b480      	push	{r7}
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
	...

080020a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  disp_time++;
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <SysTick_Handler+0x20>)
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	1c50      	adds	r0, r2, #1
 80020b0:	f143 0100 	adc.w	r1, r3, #0
 80020b4:	4b03      	ldr	r3, [pc, #12]	; (80020c4 <SysTick_Handler+0x20>)
 80020b6:	e9c3 0100 	strd	r0, r1, [r3]
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr
 80020c4:	20000048 	.word	0x20000048

080020c8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80020cc:	4b1f      	ldr	r3, [pc, #124]	; (800214c <SystemInit+0x84>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d2:	4a1e      	ldr	r2, [pc, #120]	; (800214c <SystemInit+0x84>)
 80020d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80020dc:	4b1c      	ldr	r3, [pc, #112]	; (8002150 <SystemInit+0x88>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1b      	ldr	r2, [pc, #108]	; (8002150 <SystemInit+0x88>)
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80020e8:	4b19      	ldr	r3, [pc, #100]	; (8002150 <SystemInit+0x88>)
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4918      	ldr	r1, [pc, #96]	; (8002150 <SystemInit+0x88>)
 80020ee:	4b19      	ldr	r3, [pc, #100]	; (8002154 <SystemInit+0x8c>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80020f4:	4b16      	ldr	r3, [pc, #88]	; (8002150 <SystemInit+0x88>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a15      	ldr	r2, [pc, #84]	; (8002150 <SystemInit+0x88>)
 80020fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80020fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002102:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002104:	4b12      	ldr	r3, [pc, #72]	; (8002150 <SystemInit+0x88>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a11      	ldr	r2, [pc, #68]	; (8002150 <SystemInit+0x88>)
 800210a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800210e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002110:	4b0f      	ldr	r3, [pc, #60]	; (8002150 <SystemInit+0x88>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	4a0e      	ldr	r2, [pc, #56]	; (8002150 <SystemInit+0x88>)
 8002116:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800211a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <SystemInit+0x88>)
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	4a0b      	ldr	r2, [pc, #44]	; (8002150 <SystemInit+0x88>)
 8002122:	f023 030f 	bic.w	r3, r3, #15
 8002126:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002128:	4b09      	ldr	r3, [pc, #36]	; (8002150 <SystemInit+0x88>)
 800212a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800212c:	4908      	ldr	r1, [pc, #32]	; (8002150 <SystemInit+0x88>)
 800212e:	4b0a      	ldr	r3, [pc, #40]	; (8002158 <SystemInit+0x90>)
 8002130:	4013      	ands	r3, r2
 8002132:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <SystemInit+0x88>)
 8002136:	2200      	movs	r2, #0
 8002138:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <SystemInit+0x84>)
 800213c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002140:	609a      	str	r2, [r3, #8]
#endif
}
 8002142:	bf00      	nop
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	e000ed00 	.word	0xe000ed00
 8002150:	40021000 	.word	0x40021000
 8002154:	f87fc00c 	.word	0xf87fc00c
 8002158:	ff00fccc 	.word	0xff00fccc

0800215c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	; (8002174 <NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	f003 021f 	and.w	r2, r3, #31
 8002188:	4907      	ldr	r1, [pc, #28]	; (80021a8 <NVIC_EnableIRQ+0x30>)
 800218a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	2001      	movs	r0, #1
 8002192:	fa00 f202 	lsl.w	r2, r0, r2
 8002196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	e000e100 	.word	0xe000e100

080021ac <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	6039      	str	r1, [r7, #0]
 80021b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 80021b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	da0b      	bge.n	80021d8 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	490c      	ldr	r1, [pc, #48]	; (80021f8 <NVIC_SetPriority+0x4c>)
 80021c6:	79fb      	ldrb	r3, [r7, #7]
 80021c8:	f003 030f 	and.w	r3, r3, #15
 80021cc:	3b04      	subs	r3, #4
 80021ce:	0112      	lsls	r2, r2, #4
 80021d0:	b2d2      	uxtb	r2, r2
 80021d2:	440b      	add	r3, r1
 80021d4:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021d6:	e009      	b.n	80021ec <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	4907      	ldr	r1, [pc, #28]	; (80021fc <NVIC_SetPriority+0x50>)
 80021de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e2:	0112      	lsls	r2, r2, #4
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	440b      	add	r3, r1
 80021e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	e000e100 	.word	0xe000e100

08002200 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002200:	b480      	push	{r7}
 8002202:	b089      	sub	sp, #36	; 0x24
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f003 0307 	and.w	r3, r3, #7
 8002212:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f1c3 0307 	rsb	r3, r3, #7
 800221a:	2b04      	cmp	r3, #4
 800221c:	bf28      	it	cs
 800221e:	2304      	movcs	r3, #4
 8002220:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	3304      	adds	r3, #4
 8002226:	2b06      	cmp	r3, #6
 8002228:	d902      	bls.n	8002230 <NVIC_EncodePriority+0x30>
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3b03      	subs	r3, #3
 800222e:	e000      	b.n	8002232 <NVIC_EncodePriority+0x32>
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002234:	f04f 32ff 	mov.w	r2, #4294967295
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43da      	mvns	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	401a      	ands	r2, r3
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002248:	f04f 31ff 	mov.w	r1, #4294967295
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	fa01 f303 	lsl.w	r3, r1, r3
 8002252:	43d9      	mvns	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	4313      	orrs	r3, r2
         );
}
 800225a:	4618      	mov	r0, r3
 800225c:	3724      	adds	r7, #36	; 0x24
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
	...

08002268 <LL_APB1_GRP1_EnableClock>:
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002270:	4b08      	ldr	r3, [pc, #32]	; (8002294 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	4907      	ldr	r1, [pc, #28]	; (8002294 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4313      	orrs	r3, r2
 800227a:	61cb      	str	r3, [r1, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 800227c:	4b05      	ldr	r3, [pc, #20]	; (8002294 <LL_APB1_GRP1_EnableClock+0x2c>)
 800227e:	69da      	ldr	r2, [r3, #28]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	4013      	ands	r3, r2
 8002284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	bf00      	nop
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	40021000 	.word	0x40021000

08002298 <LL_TIM_EnableCounter>:
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f043 0201 	orr.w	r2, r3, #1
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	601a      	str	r2, [r3, #0]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <LL_TIM_EnableARRPreload>:
{
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	601a      	str	r2, [r3, #0]
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_TIM_OC_DisableFast>:
{
 80022d8:	b4b0      	push	{r4, r5, r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d028      	beq.n	800233a <LL_TIM_OC_DisableFast+0x62>
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d023      	beq.n	8002336 <LL_TIM_OC_DisableFast+0x5e>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b10      	cmp	r3, #16
 80022f2:	d01e      	beq.n	8002332 <LL_TIM_OC_DisableFast+0x5a>
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	2b40      	cmp	r3, #64	; 0x40
 80022f8:	d019      	beq.n	800232e <LL_TIM_OC_DisableFast+0x56>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002300:	d013      	beq.n	800232a <LL_TIM_OC_DisableFast+0x52>
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002308:	d00d      	beq.n	8002326 <LL_TIM_OC_DisableFast+0x4e>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002310:	d007      	beq.n	8002322 <LL_TIM_OC_DisableFast+0x4a>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002318:	d101      	bne.n	800231e <LL_TIM_OC_DisableFast+0x46>
 800231a:	2307      	movs	r3, #7
 800231c:	e00e      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 800231e:	2308      	movs	r3, #8
 8002320:	e00c      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 8002322:	2306      	movs	r3, #6
 8002324:	e00a      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <LL_TIM_OC_DisableFast+0x64>
 800233a:	2300      	movs	r3, #0
 800233c:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	3318      	adds	r3, #24
 8002342:	461a      	mov	r2, r3
 8002344:	4629      	mov	r1, r5
 8002346:	4b09      	ldr	r3, [pc, #36]	; (800236c <LL_TIM_OC_DisableFast+0x94>)
 8002348:	5c5b      	ldrb	r3, [r3, r1]
 800234a:	4413      	add	r3, r2
 800234c:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800234e:	6822      	ldr	r2, [r4, #0]
 8002350:	4629      	mov	r1, r5
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <LL_TIM_OC_DisableFast+0x98>)
 8002354:	5c5b      	ldrb	r3, [r3, r1]
 8002356:	4619      	mov	r1, r3
 8002358:	2304      	movs	r3, #4
 800235a:	408b      	lsls	r3, r1
 800235c:	43db      	mvns	r3, r3
 800235e:	4013      	ands	r3, r2
 8002360:	6023      	str	r3, [r4, #0]
}
 8002362:	bf00      	nop
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	bcb0      	pop	{r4, r5, r7}
 800236a:	4770      	bx	lr
 800236c:	0800258c 	.word	0x0800258c
 8002370:	08002598 	.word	0x08002598

08002374 <LL_TIM_SetClockSource>:
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002386:	f023 0307 	bic.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	609a      	str	r2, [r3, #8]
}
 8002392:	bf00      	nop
 8002394:	370c      	adds	r7, #12
 8002396:	46bd      	mov	sp, r7
 8002398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239c:	4770      	bx	lr

0800239e <LL_TIM_SetTriggerOutput>:
{
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	431a      	orrs	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	605a      	str	r2, [r3, #4]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr

080023c4 <LL_TIM_DisableMasterSlaveMode>:
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	609a      	str	r2, [r3, #8]
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <LL_TIM_EnableIT_UPDATE>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f043 0201 	orr.w	r2, r3, #1
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	60da      	str	r2, [r3, #12]
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <MX_TIM3_Init>:

/* USER CODE END 0 */

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b08e      	sub	sp, #56	; 0x38
 8002408:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800240a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800240e:	2200      	movs	r2, #0
 8002410:	601a      	str	r2, [r3, #0]
 8002412:	605a      	str	r2, [r3, #4]
 8002414:	609a      	str	r2, [r3, #8]
 8002416:	60da      	str	r2, [r3, #12]
 8002418:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	2220      	movs	r2, #32
 800241e:	2100      	movs	r1, #0
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f89f 	bl	8002564 <memset>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8002426:	2002      	movs	r0, #2
 8002428:	f7ff ff1e 	bl	8002268 <LL_APB1_GRP1_EnableClock>

  /* TIM3 interrupt Init */
  NVIC_SetPriority(TIM3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),2, 2));
 800242c:	f7ff fe96 	bl	800215c <NVIC_GetPriorityGrouping>
 8002430:	4603      	mov	r3, r0
 8002432:	2202      	movs	r2, #2
 8002434:	2102      	movs	r1, #2
 8002436:	4618      	mov	r0, r3
 8002438:	f7ff fee2 	bl	8002200 <NVIC_EncodePriority>
 800243c:	4603      	mov	r3, r0
 800243e:	4619      	mov	r1, r3
 8002440:	201d      	movs	r0, #29
 8002442:	f7ff feb3 	bl	80021ac <NVIC_SetPriority>
  NVIC_EnableIRQ(TIM3_IRQn);
 8002446:	201d      	movs	r0, #29
 8002448:	f7ff fe96 	bl	8002178 <NVIC_EnableIRQ>

  //TIM3 clock = 8MHz
  TIM_InitStruct.Prescaler = 7999; 								//1kHz
 800244c:	f641 733f 	movw	r3, #7999	; 0x1f3f
 8002450:	84bb      	strh	r3, [r7, #36]	; 0x24
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002452:	2300      	movs	r3, #0
 8002454:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_InitStruct.Autoreload = 19;								//20ms
 8002456:	2313      	movs	r3, #19
 8002458:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	633b      	str	r3, [r7, #48]	; 0x30
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 800245e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002462:	4619      	mov	r1, r3
 8002464:	4817      	ldr	r0, [pc, #92]	; (80024c4 <MX_TIM3_Init+0xc0>)
 8002466:	f7fe f8b3 	bl	80005d0 <LL_TIM_Init>

  //LL_TIM_DisableARRPreload(TIM3);
  LL_TIM_EnableARRPreload(TIM3);
 800246a:	4816      	ldr	r0, [pc, #88]	; (80024c4 <MX_TIM3_Init+0xc0>)
 800246c:	f7ff ff24 	bl	80022b8 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002470:	2100      	movs	r1, #0
 8002472:	4814      	ldr	r0, [pc, #80]	; (80024c4 <MX_TIM3_Init+0xc0>)
 8002474:	f7ff ff7e 	bl	8002374 <LL_TIM_SetClockSource>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_ACTIVE;
 8002478:	2310      	movs	r3, #16
 800247a:	607b      	str	r3, [r7, #4]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800247c:	2300      	movs	r3, #0
 800247e:	60bb      	str	r3, [r7, #8]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002480:	2300      	movs	r3, #0
 8002482:	60fb      	str	r3, [r7, #12]
  TIM_OC_InitStruct.CompareValue = 0;
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002488:	2300      	movs	r3, #0
 800248a:	617b      	str	r3, [r7, #20]
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	461a      	mov	r2, r3
 8002490:	2101      	movs	r1, #1
 8002492:	480c      	ldr	r0, [pc, #48]	; (80024c4 <MX_TIM3_Init+0xc0>)
 8002494:	f7fe f910 	bl	80006b8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8002498:	2101      	movs	r1, #1
 800249a:	480a      	ldr	r0, [pc, #40]	; (80024c4 <MX_TIM3_Init+0xc0>)
 800249c:	f7ff ff1c 	bl	80022d8 <LL_TIM_OC_DisableFast>

  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80024a0:	2100      	movs	r1, #0
 80024a2:	4808      	ldr	r0, [pc, #32]	; (80024c4 <MX_TIM3_Init+0xc0>)
 80024a4:	f7ff ff7b 	bl	800239e <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80024a8:	4806      	ldr	r0, [pc, #24]	; (80024c4 <MX_TIM3_Init+0xc0>)
 80024aa:	f7ff ff8b 	bl	80023c4 <LL_TIM_DisableMasterSlaveMode>

  LL_TIM_EnableIT_UPDATE(TIM3);
 80024ae:	4805      	ldr	r0, [pc, #20]	; (80024c4 <MX_TIM3_Init+0xc0>)
 80024b0:	f7ff ff98 	bl	80023e4 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableCounter(TIM3);
 80024b4:	4803      	ldr	r0, [pc, #12]	; (80024c4 <MX_TIM3_Init+0xc0>)
 80024b6:	f7ff feef 	bl	8002298 <LL_TIM_EnableCounter>

}
 80024ba:	bf00      	nop
 80024bc:	3738      	adds	r7, #56	; 0x38
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	40000400 	.word	0x40000400

080024c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80024c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002500 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024ce:	e003      	b.n	80024d8 <LoopCopyDataInit>

080024d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024d0:	4b0c      	ldr	r3, [pc, #48]	; (8002504 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024d6:	3104      	adds	r1, #4

080024d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024d8:	480b      	ldr	r0, [pc, #44]	; (8002508 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024da:	4b0c      	ldr	r3, [pc, #48]	; (800250c <LoopForever+0xe>)
	adds	r2, r0, r1
 80024dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80024e0:	d3f6      	bcc.n	80024d0 <CopyDataInit>
	ldr	r2, =_sbss
 80024e2:	4a0b      	ldr	r2, [pc, #44]	; (8002510 <LoopForever+0x12>)
	b	LoopFillZerobss
 80024e4:	e002      	b.n	80024ec <LoopFillZerobss>

080024e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80024e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80024e8:	f842 3b04 	str.w	r3, [r2], #4

080024ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80024ec:	4b09      	ldr	r3, [pc, #36]	; (8002514 <LoopForever+0x16>)
	cmp	r2, r3
 80024ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80024f0:	d3f9      	bcc.n	80024e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80024f2:	f7ff fde9 	bl	80020c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024f6:	f000 f811 	bl	800251c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80024fa:	f7ff fd19 	bl	8001f30 <main>

080024fe <LoopForever>:

LoopForever:
    b LoopForever
 80024fe:	e7fe      	b.n	80024fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002500:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002504:	080025ac 	.word	0x080025ac
	ldr	r0, =_sdata
 8002508:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800250c:	2000001c 	.word	0x2000001c
	ldr	r2, =_sbss
 8002510:	20000020 	.word	0x20000020
	ldr	r3, = _ebss
 8002514:	20000058 	.word	0x20000058

08002518 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002518:	e7fe      	b.n	8002518 <ADC1_2_IRQHandler>
	...

0800251c <__libc_init_array>:
 800251c:	b570      	push	{r4, r5, r6, lr}
 800251e:	4d0d      	ldr	r5, [pc, #52]	; (8002554 <__libc_init_array+0x38>)
 8002520:	4c0d      	ldr	r4, [pc, #52]	; (8002558 <__libc_init_array+0x3c>)
 8002522:	1b64      	subs	r4, r4, r5
 8002524:	10a4      	asrs	r4, r4, #2
 8002526:	2600      	movs	r6, #0
 8002528:	42a6      	cmp	r6, r4
 800252a:	d109      	bne.n	8002540 <__libc_init_array+0x24>
 800252c:	4d0b      	ldr	r5, [pc, #44]	; (800255c <__libc_init_array+0x40>)
 800252e:	4c0c      	ldr	r4, [pc, #48]	; (8002560 <__libc_init_array+0x44>)
 8002530:	f000 f820 	bl	8002574 <_init>
 8002534:	1b64      	subs	r4, r4, r5
 8002536:	10a4      	asrs	r4, r4, #2
 8002538:	2600      	movs	r6, #0
 800253a:	42a6      	cmp	r6, r4
 800253c:	d105      	bne.n	800254a <__libc_init_array+0x2e>
 800253e:	bd70      	pop	{r4, r5, r6, pc}
 8002540:	f855 3b04 	ldr.w	r3, [r5], #4
 8002544:	4798      	blx	r3
 8002546:	3601      	adds	r6, #1
 8002548:	e7ee      	b.n	8002528 <__libc_init_array+0xc>
 800254a:	f855 3b04 	ldr.w	r3, [r5], #4
 800254e:	4798      	blx	r3
 8002550:	3601      	adds	r6, #1
 8002552:	e7f2      	b.n	800253a <__libc_init_array+0x1e>
 8002554:	080025a4 	.word	0x080025a4
 8002558:	080025a4 	.word	0x080025a4
 800255c:	080025a4 	.word	0x080025a4
 8002560:	080025a8 	.word	0x080025a8

08002564 <memset>:
 8002564:	4402      	add	r2, r0
 8002566:	4603      	mov	r3, r0
 8002568:	4293      	cmp	r3, r2
 800256a:	d100      	bne.n	800256e <memset+0xa>
 800256c:	4770      	bx	lr
 800256e:	f803 1b01 	strb.w	r1, [r3], #1
 8002572:	e7f9      	b.n	8002568 <memset+0x4>

08002574 <_init>:
 8002574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002576:	bf00      	nop
 8002578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800257a:	bc08      	pop	{r3}
 800257c:	469e      	mov	lr, r3
 800257e:	4770      	bx	lr

08002580 <_fini>:
 8002580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002582:	bf00      	nop
 8002584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002586:	bc08      	pop	{r3}
 8002588:	469e      	mov	lr, r3
 800258a:	4770      	bx	lr
